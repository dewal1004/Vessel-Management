OBJECT Table 5371 Service Connection Error
{
  OBJECT-PROPERTIES
  {
    Date=20150915D;
    Time=120000T;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Service Connection Error;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;GUID          ;CaptionML=ENU=Code }
    { 2   ;   ;Server Address      ;Text250       ;TableRelation="CRM Connection Setup"."Server Address";
                                                   CaptionML=ENU=Dynamics CRM URL }
    { 3   ;   ;Last Occurrence     ;DateTime      ;CaptionML=ENU=Last Occurrence }
    { 4   ;   ;Error               ;BLOB          ;CaptionML=ENU=Error }
    { 5   ;   ;Hash                ;Integer       ;CaptionML=ENU=Hash }
    { 6   ;   ;First Occurrence    ;DateTime      ;CaptionML=ENU=First Occurrence }
    { 7   ;   ;Occurrence Count    ;Integer       ;CaptionML=ENU=Occurrence Count }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=true }
    {    ;Hash                                     }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ConfirmQst@1000 : TextConst 'ENU=Are you sure that you want to delete connection failure errors?';

    [LineStart(79791)]
    PROCEDURE SetError@1(ErrorMsg@1000 : Text);
    VAR
      DataStream@1001 : OutStream;
    BEGIN
      Clear(Error);
      Error.CreateOutStream(DataStream);
      DataStream.Write(ErrorMsg);
      Modify;
    END;

    [LineStart(79797)]
    PROCEDURE GetError@2() ErrorMsg : Text;
    VAR
      DataStream@1000 : InStream;
    BEGIN
      ErrorMsg := '';
      CalcFields(Error);
      if Error.HasValue then begin
        Error.CreateInStream(DataStream);
        DataStream.Read(ErrorMsg);
      end;
    END;

    [LineStart(79805)]
    PROCEDURE CanInsertRecord@3(Error@1000 : Text;HostName@1002 : Text) : Boolean;
    VAR
      HashText@1001 : Text;
    BEGIN
      HashText := Format(CreateHash(Error,HostName));
      SetFilter(Hash,HashText);
      exit(not FindSet);
    END;

    [LineStart(79810)]
    PROCEDURE DeleteEntries@5(DaysOld@1000 : Integer);
    BEGIN
      if not Confirm(ConfirmQst) then
        exit;
      SetFilter("First Occurrence",'<=%1',CreateDateTime(Today - DaysOld,Time));
      DeleteAll;
    END;

    [LineStart(79816)]
    PROCEDURE CreateHash@4(Error@1000 : Text;HostName@1002 : Text) : Integer;
    VAR
      DotNetString@1001 : DotNet "'mscorlib'.System.String";
    BEGIN
      DotNetString := DotNetString.Concat(HostName,Error);
      DotNetString := DotNetString.ToUpper;
      exit(DotNetString.GetHashCode);
    END;

    BEGIN
    END.
  }
}

