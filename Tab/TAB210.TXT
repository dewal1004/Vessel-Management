OBJECT Modification "Job Journal Line"(Table 210)
{
  OBJECT-PROPERTIES
  {
    Date=20220216D;
    Time=164244.477T;
    Modified=true;
    Version List=NAVW114.09;
  }
  PROPERTIES
  {
    Target="Job Journal Line"(Table 210);
  }
  CHANGES
  {
    { CodeModification  ;OriginalCode=BEGIN
                                        if "Job No." = '' then begin
                                          Validate("Currency Code",'');
                                          Validate("Job Task No.",'');
                                        #4..9

                                        GetJob;
                                        Job.TestBlocked;
                                        IsHandled := false;
                                        OnValidateJobNoOnBeforeCheckJob(Rec,xRec,Cust,IsHandled);
                                        if not IsHandled then begin
                                          Job.TestField("Bill-to Customer No.");
                                          Cust.Get(Job."Bill-to Customer No.");
                                          Validate("Job Task No.",'');
                                        end;
                                        "Customer Price Group" := Job."Customer Price Group";
                                        Validate("Currency Code",Job."Currency Code");
                                        CreateDim(
                                          DATABASE::Job,"Job No.",
                                          DimMgt.TypeToTableID2(Type),"No.",
                                          DATABASE::"Resource Group","Resource Group No.");
                                        Validate("Country/Region Code",Job."Bill-to Country/Region Code");
                                      END;

                         ModifiedCode=BEGIN
                                        #1..12

                                        #13..16

                                        Job.TestField(Status,Job.Status::Open);
                                        #17..19

                                        "Customer Price Group" := Job."Customer Price Group";
                                        Validate("Currency Code",Job."Currency Code");
                                        Validate("Posting Date",Job."Ending Date");
                                        Validate("Phase Code",Job.Vessel);
                                        #22..25

                                        Validate("Country/Region Code",Job."Bill-to Country/Region Code");

                                        if (Type = Type::Item) and ("No." <> '') then
                                        begin
                                        GLAcc."Global Dimension 2 Code":=Job."Global Dimension 2 Code";
                                        //"Variant Code":=Job."Global Dimension 2 Code"

                                        end;
                                      END;

                         Target="Job No."(Field 3).OnValidate }
    { Insertion         ;OnLookup=BEGIN
                                    if "Location Code" = '' then
                                  END;

                         Target="No."(Field 8) }
    { CodeModification  ;OriginalCode=BEGIN
                                        if ("No." = '') or ("No." <> xRec."No.") then begin
                                          Description := '';
                                          "Unit of Measure Code" := '';
                                          "Qty. per Unit of Measure" := 1;
                                          "Variant Code" := '';
                                          "Work Type Code" := '';
                                          DeleteAmounts;
                                          "Cost Factor" := 0;
                                          "Applies-to Entry" := 0;
                                          "Applies-from Entry" := 0;
                                          CheckedAvailability := false;
                                          "Job Planning Line No." := 0;
                                          if "No." = '' then begin
                                            UpdateDimensions;
                                            exit;
                                          end
                                        end;

                                        case Type of
                                          Type::Resource:
                                            CopyFromResource;
                                          Type::Item:
                                            CopyFromItem;
                                          Type::"G/L Account":
                                            CopyFromGLAccount;
                                        end;

                                        Validate(Quantity);
                                        UpdateDimensions;
                                      END;

                         ModifiedCode=BEGIN

                                        if ("No." = '') or ("No." <> xRec."No.") then begin
                                         Description := '';
                                          "Unit of Measure Code" := '';
                                         "Qty. per Unit of Measure" := 1;
                                        #5..17
                                        "Work Type Code":=Item."Item Category Code"; //AAA-Nov 2001

                                           if Item."Gen. Prod. Posting Group"='FIS' then "Unit Price" := Item.Points; //AAA-Jan 2002
                                            if Item."Gen. Prod. Posting Group"='FIS' then
                                            FindItemPoints; //santus 12-01-14
                                           "Statistics Group":=Item."Statistics Group";
                                            WorkTypeCode("No.");

                                        case Type of
                                        Type::Resource:
                                            CopyFromResource;
                                          Type::Item:
                                        CopyFromItem;

                                         Type::"G/L Account":
                                            CopyFromGLAccount;
                                        end;
                                        //AAA1-  Nov 2001        //Location Fixg
                                          if "Location Code" = '' then
                                          if User.Get(UserId) then
                                           if  User."Shortcut Dimension 1 Code"='MRKT' then begin
                                              InvtrSetUp.Get;
                                              "Location Code":=InvtrSetUp."Default Cold Room";
                                           end else
                                             if (Job.Get("Job No.")) and (Job.Vessel<>'') then
                                                "Location Code":=Job.Vessel;

                                          //AAA/May 21/2002
                                          if (Type = Type::Item) and ("No." <> '') then
                                          begin
                                          GLAcc."Global Dimension 2 Code":=Job."Global Dimension 2 Code";


                                          end;
                                        Validate(Quantity);

                                        UpdateDimensions;
                                      END;

                         Target="No."(Field 8).OnValidate }
    { CodeModification  ;OriginalCode=BEGIN
                                        "Quantity (Base)" := UOMMgt.CalcBaseQty(Quantity,"Qty. per Unit of Measure");
                                        UpdateAllAmounts;

                                        if "Job Planning Line No." <> 0 then
                                          Validate("Job Planning Line No.");

                                        CheckItemAvailable;
                                        if Item."Item Tracking Code" <> '' then
                                          ReserveJobJnlLine.VerifyQuantity(Rec,xRec);
                                      END;

                         ModifiedCode=BEGIN

                                        "Quantity (Base)" := UOMMgt.CalcBaseQty(Quantity,"Qty. per Unit of Measure");

                                        #2..9
                                      END;

                         Target=Quantity(Field 10).OnValidate }
    { PropertyModification;
                         Target="Unit Cost (LCY)"(Field 13);
                         Property=Editable;
                         OriginalValue=false;
                         ModifiedValue=true }
    { PropertyModification;
                         Target="Total Cost (LCY)"(Field 14);
                         Property=Editable;
                         OriginalValue=false;
                         ModifiedValue=true }
    { PropertyModification;
                         Target="Total Price (LCY)"(Field 16);
                         Property=Editable;
                         OriginalValue=false;
                         ModifiedValue=true }
    { CodeModification  ;OriginalCode=BEGIN
                                        GetGLSetup;
                                        case Type of
                                          Type::Item:
                                        #4..30
                                            end;
                                        end;
                                        Validate(Quantity);
                                      END;

                         ModifiedCode=BEGIN
                                        #1..33
                                         //AAA-DEC-2001
                                        //IF "Work Type Code"='CTH' THEN "Bin Code":="Unit of Measure Code";
                                        //VALIDATE("Variant Code","Shortcut Dimension 2 Code");
                                      END;

                         Target="Unit of Measure Code"(Field 18).OnValidate }
    { PropertyModification;
                         Target="Source Code"(Field 62);
                         Property=TableRelation;
                         OriginalValue="Source Code";
                         ModifiedValue=IF ("External Document No."=FILTER('')) "Source Code"
                                       ELSE IF ("External Document No."=FILTER(<>'')) Location WHERE ("Location Type"=CONST(Vessel)) }
    { PropertyModification;
                         Target="Source Code"(Field 62);
                         Property=Editable;
                         OriginalValue=false;
                         ModifiedValue=true }
    { PropertyModification;
                         Target="Journal Batch Name"(Field 73);
                         Property=Data type;
                         OriginalValue=Code10;
                         ModifiedValue=Code20 }
    { CodeModification  ;OriginalCode=BEGIN
                                        ShowDimensions;
                                      END;

                         ModifiedCode=BEGIN
                                        //ShowDimensions;  #1
                                      END;

                         Target="Dimension Set ID"(Field 480).OnLookup }
    { CodeModification  ;OriginalCode=BEGIN
                                        if "Variant Code" = '' then begin
                                          if Type = Type::Item then begin
                                            Item.Get("No.");
                                        #4..10
                                        TestField(Type,Type::Item);

                                        ItemVariant.Get("No.","Variant Code");
                                        Description := ItemVariant.Description;
                                        "Description 2" := ItemVariant."Description 2";

                                        Validate(Quantity);
                                      END;

                         ModifiedCode=BEGIN
                                        #1..13
                                        if ItemVariant.Description<>''  then      ///AAA-Nov 2001
                                        #14..17
                                      END;

                         Target="Variant Code"(Field 5402).OnValidate }
    { CodeModification  ;OriginalCode=BEGIN
                                        TestField("Location Code");
                                        TestField(Type,Type::Item);
                                        BinCode := WMSManagement.BinContentLookUp("Location Code","No.","Variant Code",'',"Bin Code");
                                        if BinCode <> '' then
                                          Validate("Bin Code",BinCode);
                                      END;

                         ModifiedCode=BEGIN
                                        #1..5
                                        //AAA-DEC-2001
                                        "Unit of Measure Code":="Bin Code";
                                      END;

                         Target="Bin Code"(Field 5403).OnLookup }
    { Insertion         ;InsertAfter="Lot No."(Field 6501);
                         ChangedElements=FieldCollection
                         {
                           { 50300;  ;Catch               ;Decimal       ;OnValidate=BEGIN
                                                                                       //IF Catch <> 0 THEN//nitin
                                                                                         //"Line Amount" := "Unit Price" * Catch;

                                                                                       //AAA-NOV - 2001
                                                                                       Validate(Quantity,Catch*-1);

                                                                                       if Item.Get("No.") then begin
                                                                                       Points := Item.Points;
                                                                                       "Unit Price" := Points;
                                                                                       end;

                                                                                       "Total Price" := "Unit Price" * Catch;
                                                                                       "Reason Code":='CATCH';
                                                                                       //VALIDATE("Variant Code","Shortcut Dimension 2 Code");

                                                                                       //Prepare data for Sorting
                                                                                       if InvtPostGrp.Get(Code1) then
                                                                                         Groupsort := InvtPostGrp.Category
                                                                                       else
                                                                                         Groupsort := '';
                                                                                     END;

                                                                          DecimalPlaces=0:5 }
                           { 50301;  ;Code1               ;Code10        ;TableRelation=Item;
                                                                          OnValidate=BEGIN
                                                                                       Syntesis(Code1,Pack,Brand);
                                                                                       GetItem();
                                                                                       "Task Code" := Item."Product Group Code";
                                                                                     END;
                                                                                      }
                           { 50302;  ;Pack                ;Code5         ;TableRelation="Unit of Measure" WHERE ("In Use"=CONST(true),
                                                                                                                 "Catch Code"=FILTER(<>''));
                                                                          OnValidate=BEGIN
                                                                                       Syntesis(Code1,Pack,Brand);
                                                                                     END;
                                                                                      }
                           { 50303;  ;Brand               ;Code5         ;TableRelation="Reason Code" WHERE ("In Use"=CONST(true),
                                                                                                             Type=CONST(Brands));
                                                                          OnValidate=BEGIN
                                                                                       Syntesis(Code1,Pack,Brand);
                                                                                     END;
                                                                                      }
                           { 50316;  ;Statistics Group    ;Integer       ;CaptionML=ENU=Statistics Group }
                           { 50317;  ;Catch Total         ;Decimal       ;FieldClass=FlowField;
                                                                          CalcFormula=Sum("Job Journal Line".Catch WHERE ("Journal Template Name"=FIELD("Journal Template Name"),
                                                                                                                          "Journal Batch Name"=FIELD("Journal Batch Name")));
                                                                          Editable=false }
                           { 50318;  ;Catch Points        ;Decimal       ;FieldClass=FlowField;
                                                                          CalcFormula=Sum("Job Journal Line"."Total Price" WHERE ("Journal Template Name"=FIELD("Journal Template Name"),
                                                                                                                                  "Journal Batch Name"=FIELD("Journal Batch Name")));
                                                                          Editable=false }
                           { 50320;  ;Reconciliation Catch Quantity;Decimal }
                           { 50321;  ;ROB                 ;Decimal       ;OnValidate=BEGIN
                                                                                       //CALCFIELDS("Stock Position Calc.");
                                                                                       if ROB < 0 then
                                                                                         Error('Negative stock position not possible');
                                                                                       Validate(Quantity,StockTillDate(Rec) - ROB);
                                                                                       "ROB By" := UserId;
                                                                                     END;
                                                                                      }
                           { 50322;  ;Stock Position Calc.;Decimal       ;FieldClass=FlowField;
                                                                          CalcFormula=Sum("Item Ledger Entry".Quantity WHERE ("Item No."=FIELD("No."),
                                                                                                                              "Location Code"=FIELD("Location Code")));
                                                                          Editable=false }
                           { 50323;  ;Posted Catch        ;Decimal       ;FieldClass=FlowField;
                                                                          CalcFormula=-Sum("Job Ledger Entry".Quantity WHERE ("Job No."=FIELD("Job No."),
                                                                                                                              "Posting Date"=FIELD("Posting Date"),
                                                                                                                              Type=FIELD(Type),
                                                                                                                              "No."=FIELD("No.")));
                                                                          DecimalPlaces=0:2;
                                                                          Editable=false }
                           { 50324;  ;Catch Sea Days      ;Decimal       ;Description=Total sea day on a day that there is a catch }
                           { 50333;  ;Work Type Code Sort ;Code15        ;TableRelation="Work Type";
                                                                          OnValidate=BEGIN
                                                                                       if (Type = Type::Resource) and ("No." <> '') then begin
                                                                                         if WorkType.Get("Work Type Code") then
                                                                                           "Unit of Measure Code" := WorkType."Unit of Measure Code"
                                                                                         else begin
                                                                                           Res.Get("No.");
                                                                                           "Unit of Measure Code" := Res."Base Unit of Measure";
                                                                                         end;
                                                                                         //FindResUnitCost;
                                                                                         //FindResPrice;
                                                                                       end;
                                                                                     END;

                                                                          ValidateTableRelation=false;
                                                                          CaptionML=ENU=Work Type Code Sort }
                           { 50338;  ;Shrimp Points       ;Decimal       ;FieldClass=FlowField;
                                                                          CalcFormula=Sum("Job Journal Line"."Total Price" WHERE ("Journal Template Name"=FIELD("Journal Template Name"),
                                                                                                                                  "Journal Batch Name"=FIELD("Journal Batch Name"),
                                                                                                                                  "Task Code"=CONST('SHR')));
                                                                          Editable=false }
                           { 50339;  ;Fish Points         ;Decimal       ;FieldClass=FlowField;
                                                                          CalcFormula=Sum("Job Journal Line"."Total Price" WHERE ("Journal Template Name"=FIELD("Journal Template Name"),
                                                                                                                                  "Journal Batch Name"=FIELD("Journal Batch Name"),
                                                                                                                                  "Task Code"=CONST('FIS')));
                                                                          Editable=false }
                           { 50350;  ;ROB By              ;Code50        ;TableRelation=User;
                                                                          Editable=false }
                           { 50351;  ;Groupsort           ;Code15        ;Description=added by santus 22-04-05 }
                           { 50352;  ;Phase Code          ;Code30         }
                           { 50353;  ;Task Code           ;Code30        ;TableRelation=Task }
                         }
                          }
    { PropertyInsertion ;Target="Journal Template Name","Journal Batch Name","Line No."(Key);
                         Property=SumIndexFields;
                         ModifiedValue=Catch,"Total Price" }
    { PropertyInsertion ;Target="Journal Template Name","Journal Batch Name",Type,"No.","Unit of Measure Code","Work Type Code"(Key);
                         Property=SumIndexFields;
                         ModifiedValue="Total Cost" }
    { Insertion         ;InsertAfter="Journal Template Name","Journal Batch Name",Type,"No.","Unit of Measure Code","Work Type Code"(Key);
                         ChangedElements=KeyCollection
                         {
                           {    ;"Journal Template Name","Journal Batch Name","Statistics Group","Work Type Code";
                                                                          SumIndexFields=Quantity }
                           {    ;"Journal Template Name","Journal Batch Name","Statistics Group","Work Type Code Sort";
                                                                          SumIndexFields=Quantity }
                           {    ;"Posting Group"                         ;SumIndexFields="Total Cost","Total Price" }
                         }
                          }
    { CodeModification  ;OriginalCode=BEGIN
                                        LockTable;
                                        JobJnlTemplate.Get("Journal Template Name");
                                        JobJnlBatch.Get("Journal Template Name","Journal Batch Name");

                                        ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                        ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                      END;

                         ModifiedCode=BEGIN
                                        #1..3
                                        "Shortcut Dimension 2 Code":='ATLANTIC';
                                        ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                        ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");

                                        //AAA/March 2002
                                        if Code1<>'' then
                                        begin
                                          Syntesis(Code1,Pack,Brand);
                                          Validate("No.",ItemVar);
                                        end;
                                        if Catch <> 0 then
                                          //"Line Amount" := "Unit Price" * Catch;

                                        //AAA-NOV - 2001
                                        Validate(Quantity,Catch*-1);
                                      END;

                         Target=OnInsert }
    { CodeModification  ;OriginalCode=BEGIN
                                        GetItem;
                                        Item.TestField(Blocked,false);
                                        Description := Item.Description;
                                        #4..7
                                        "Posting Group" := Item."Inventory Posting Group";
                                        "Gen. Prod. Posting Group" := Item."Gen. Prod. Posting Group";
                                        Validate("Unit of Measure Code",Item."Base Unit of Measure");

                                        OnAfterAssignItemValues(Rec,Item);
                                      END;

                         ModifiedCode=BEGIN
                                        #1..10
                                        FindItemPrice;
                                        CheckItemAvailable;
                                        "Work Type Code":=Item."Item Category Code"; //AAA-Nov 2001
                                        "Task Code":=Item."Product Group Code";  //AAA-Jan 2002
                                        "Statistics Group":=Item."Statistics Group";
                                        if Item."Gen. Prod. Posting Group"='FIS' then
                                          FindItemPoints; //santus 12-01-14
                                        "Statistics Group":=Item."Statistics Group";
                                        WorkTypeCode("No.");

                                        OnAfterAssignItemValues(Rec,Item);
                                      END;

                         Target=CopyFromItem(PROCEDURE 30) }
    { CodeModification  ;OriginalCode=BEGIN
                                        IsHandled := false;
                                        OnBeforeSetUpNewLine(Rec,xRec,LastJobJnlLine,IsHandled);
                                        if IsHandled then
                                        #4..12
                                          "Document No." := LastJobJnlLine."Document No.";
                                          Type := LastJobJnlLine.Type;
                                          Validate("Line Type",LastJobJnlLine."Line Type");
                                        end else begin
                                          "Posting Date" := WorkDate;
                                          "Document Date" := WorkDate;
                                        #19..26
                                        "Reason Code" := JobJnlBatch."Reason Code";
                                        "Posting No. Series" := JobJnlBatch."Posting No. Series";

                                        OnAfterSetUpNewLine(Rec,LastJobJnlLine,JobJnlTemplate,JobJnlBatch);
                                      END;

                         ModifiedCode=BEGIN
                                        #1..15
                                          // Default job and Location on new line
                                          if LastJobJnlLine."Job No." <> '' then
                                            "Job No." := LastJobJnlLine."Job No.";
                                          if LastJobJnlLine."Location Code" <> '' then
                                            "Location Code" := LastJobJnlLine."Location Code";
                                          if LastJobJnlLine."Job Task No." <> '' then
                                            "Job Task No." := LastJobJnlLine."Job Task No.";
                                        #16..29
                                        "External Document No.":=JobJnlBatch."Voyage No.";

                                        OnAfterSetUpNewLine(Rec,LastJobJnlLine,JobJnlTemplate,JobJnlBatch);
                                      END;

                         Target=SetUpNewLine(PROCEDURE 9) }
    { CodeModification  ;OriginalCode=BEGIN
                                        if "Total Price" <> 0 then begin
                                          if ("Line Amount" <> xRec."Line Amount") and ("Line Discount Amount" = xRec."Line Discount Amount") then begin
                                            "Line Amount" := Round("Line Amount",AmountRoundingPrecisionFCY);
                                        #4..23
                                        end else begin
                                          "Line Amount" := 0;
                                          "Line Discount Amount" := 0;
                                          "Line Amount (LCY)" := 0;
                                          "Line Discount Amount (LCY)" := 0;
                                        end;

                                        OnAfterUpdateAmountsAndDiscounts(Rec);
                                      END;

                         ModifiedCode=BEGIN
                                        #1..26
                                        #29..31
                                      END;

                         Target=UpdateAmountsAndDiscounts(PROCEDURE 31) }
    { Insertion         ;InsertAfter=IsOpenedFromBatch(PROCEDURE 22);
                         ChangedElements=PROCEDURECollection
                         {
                           [LineStart(31604)]
                           PROCEDURE "-------------"@1000000000();
                           BEGIN
                           END;

                           [LineStart(31607)]
                           PROCEDURE Syntesis@1000000001(Cd@1000000000 : Code[10];Pk@1000000001 : Code[10];Br@1000000002 : Code[10]) Itemno@1000000003 : Code[10];
                           BEGIN
                              //Syntesis Item Code Name
                               //Get Unit of measure Code
                               if UOM.Get(Pk) then UOMCd:=UOM."Catch Code";
                               //Requip Code Name
                               ItemVar:=Format(Cd);//+UOMCd+COPYSTR(Br,1,1);
                               "No.":=ItemVar;
                           END;

                           [LineStart(31615)]
                           PROCEDURE WorkTypeCode@1000000002(VAR Nos@1000000000 : Code[10]);
                           BEGIN
                             if items.Get(Nos) then
                               if InvPostGrp.Get(items."Inventory Posting Group") then
                                   "Work Type Code Sort":=InvPostGrp.Category;
                           END;

                           [LineStart(31620)]
                           PROCEDURE StockTillDate@1000000010(JJLn@1000000000 : Record "Job Journal Line") : Decimal;
                           VAR
                             Items@1000000001 : Record Item;
                           BEGIN
                             if Items.Get(JJLn."No.") then
                             begin
                               Items.SetFilter(Items."Location Filter",JJLn."Location Code");
                               Items.SetFilter(Items."Date Filter",'..%1',JJLn."Posting Date");
                               Items.CalcFields(Items.Inventory);
                               exit(Items.Inventory/JJLn."Qty. per Unit of Measure");
                             end else
                               exit(99999);
                           END;

                           [LineStart(31630)]
                           PROCEDURE FindItemPoints@1000000003();
                           BEGIN
                             ItemPoints.Init;
                             ItemPoints."Item No." := "No.";
                             ItemPoints."Price Group Code" := "Customer Price Group";
                             ItemPoints."Unit of Measure Code" := "Unit of Measure Code";
                             ItemPoints."Starting Date" := "Posting Date";
                             ItemFindPoints.Run(ItemPoints);
                             ItemPoints.TestField("Price Includes VAT",false);
                             GetGLSetup;
                             "Unit Price" := ItemPoints."Unit Price";
                             if ItemPoints."Unit of Measure Code" = '' then
                               "Unit Price" :=
                                 Round(
                                   "Unit Price" * "Qty. per Unit of Measure",
                                   GLSetup."Unit-Amount Rounding Precision");
                             Validate("Unit Price");
                           END;

                           [LineStart(31647)]
                           PROCEDURE ClearCatch@58();
                           VAR
                             DocPrint@1000000002 : Codeunit "Document-Print";
                             Window@1000000001 : Dialog;
                             RecCount@1000000000 : Integer;
                             JobTask@1000 : Record "Job Task";
                           BEGIN

                             if JBat.Get("Journal Template Name","Journal Batch Name") then
                             begin
                                 //Job Journal Line Insertion
                                 i:=0;
                                 //Insert Default Catches for the Job
                                 JCatchDefa.SetCurrentKey(JCatchDefa."S/No.",JCatchDefa."Table Name",JCatchDefa."No.");
                                 JCatchDefa.SetRange(JCatchDefa."Table Name",JCatchDefa."Table Name"::Job);
                                 JCatchDefa.SetRange(JCatchDefa."No.",JBat."Job No.");
                                 if JCatchDefa.Find('-') then begin
                                 Window.Open('Clearing Catch Record(s)...Please wait.\' +
                                             'No of Records  #1########\' +
                                             'Count          #2########');
                                 RecCount := JCatchDefa.Count;
                                 Window.Update(1,RecCount);
                                 repeat
                                   i:=i+1;
                                   Window.Update(2,i);
                                   JJLine.Init;
                                   JJLine."Journal Template Name":="Journal Template Name";
                                   if "Journal Template Name"='RECURRING' then
                                   begin
                                      JJLine."Recurring Method":=2;
                                      if Evaluate(JJLine."Recurring Frequency",'1D') then;
                                   end;

                                   JJLine."Journal Batch Name":="Journal Batch Name";
                                   JJLine.Validate(JJLine."Job No.",JBat."Job No." );
                                   JJLine."Posting Date":=JBat."Catch Date";
                                   JJLine."Phase Code":=JBat."Fishing Ground";
                                   JJLine."Document No.":=JBat.Name+Format(JBat."Catch Date");
                                   JJLine.Type:=JJLine.Type::Item;
                                   JJLine."Line No.":=i*10000;
                                   JJLine.Code1:=JCatchDefa.Code;
                                   JJLine.Pack:=JCatchDefa."Pack Size";
                                   JJLine.Brand:=JCatchDefa.Brand;
                                   if UOM.Get(JJLine.Pack) then UOMCd:=UOM."Catch Code"; //Get Unit of measure Code
                                  //ITVars:=FORMAT(JJLine.Code1)+UOMCd+COPYSTR(JJLine.Brand,1,1);   //Requip Code Name MP 2 20218
                                 ItemVar := JCatchDefa.Code;
                                 JJLine.Validate(JJLine."No.",ItemVar); //Updates JJLine."Task Code"
                                 items.Get(JJLine."No.");
                                //  JJLine.VALIDATE("Task Code",items."Product Group Code");//MP220218
                                   JJLine.Validate("Unit Price",items.Points);
                                   JJLine.Validate(JJLine."Location Code",JBat.Name);
                             //       IF JobTask.FINDFIRST THEN
                             //        Jobtask_No := JobTask."Job Task No.";
                             //      JJLine.VALIDATE("Job Task No.",Jobtask_No);
                                   if Jobs.Get(JBat."Job No.") then
                                   begin
                                         JJLine."Catch Sea Days":=JBat."Catch Date"-Jobs."Starting Date";
                                   end;

                                   //JJLine."Step Code":=FORMAT(JBat."Sea Temperature"); //AA
                                     if items.Get(ITVars) then
                                         if items."Unit Cost"<>0 then
                                           JJLine.Validate(JJLine."Unit Cost",items."Unit Cost")
                                         else
                                           JJLine.Validate(JJLine."Unit Cost",items.Points);
                                           JJLine.Validate(JJLine."Unit Cost",0); //AAA-Sept 30, 2002 Unit cost must be zero
                                   JJLine.Validate(JJLine."Shortcut Dimension 2 Code",JBat."Global Dimension 2 Code");
                                   JJLine."Phase Code":=JBat."Fishing Ground"; //AA
                                   JJLine."Source Code":=JBat."Fishing Ground";
                                   JobTask.SetRange("Job No.","Job No.");
                                   if JobTask.FindFirst then
                                     Jobtask_No := JobTask."Job Task No.";
                                   JJLine.Validate("Job Task No.",Jobtask_No);
                                   if not JJLine.Insert(true) then JJLine.Modify(true);
                                 until JCatchDefa.Next()= 0;
                                 Window.Close;
                                 end;
                             end;
                           END;

                           [LineStart(31720)]
                           PROCEDURE FindItemPrice@56();
                           BEGIN
                             {
                             FindSalesLinePrice.INIT;
                             FindSalesLinePrice."Item No." := "No.";
                             //ItemPrice."Price Group Code" := "Price Group Code";
                             FindSalesLinePrice."Sales Code" := "Customer Price Group";
                             FindSalesLinePrice."Unit of Measure Code" := "Unit of Measure Code";
                             FindSalesLinePrice."Starting Date" := "Posting Date";
                             PriceCalcMgt.RUN(FindSalesLinePrice);
                             ItemPrice.TESTFIELD("Price Includes VAT",FALSE);
                             GetGLSetup;
                             "Unit Price" := ItemPrice."Unit Price";
                             IF ItemPrice."Unit of Measure Code" = '' THEN
                               "Unit Price" :=
                                 ROUND(
                                   "Unit Price" * "Qty. per Unit of Measure",
                                   GLSetup."Unit-Amount Rounding Precision");
                             VALIDATE("Unit Price");
                             }
                           END;

                         }
                          }
    { Insertion         ;InsertAfter=Text007(Variable 1006);
                         ChangedElements=VariableCollection
                         {
                           "---"@1049 : Integer;
                           UOM@1048 : Record "Unit of Measure";
                           User@1047 : Record "User Setup";
                           items@1046 : Record Item;
                           InvtrSetUp@1045 : Record "Inventory Setup";
                           InvPostGrp@1044 : Record "Inventory Posting Group";
                           InvtPostGrp@1043 : Record "Inventory Posting Group";
                           UOMCd@1042 : Code[10];
                           ItemVar@1041 : Code[10];
                           ItemPoints@1031 : Record "Item Points";
                           ItemFindPoints@1014 : Codeunit "Item-Find Point";
                           Points@1050 : Decimal;
                           JobTask@1051 : Record "Job Task";
                           JCatchDefa@1062 : Record "Job catch Default";
                           JBat@1061 : Record "Job Journal Batch";
                           i@1059 : Integer;
                           JJLine@1058 : Record "Job Journal Line";
                           ITVars@1055 : Code[10];
                           Jobs@1054 : Record Job;
                           Jobtask_No@1052 : Code[20];
                           FindSalesLinePrice@1053 : Record "Sales Price";
                           PriceCalcMgt@1056 : Codeunit "Sales Price Calc. Mgt.";
                           Loc@1057 : Record Location;
                         }
                          }
  }
  CODE
  {

    BEGIN
    END.
  }
}

