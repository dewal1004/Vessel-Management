OBJECT Modification "Job Planning Line"(Table 1003)
{
  OBJECT-PROPERTIES
  {
    Date=20220218D;
    Time=175315.500T;
    Modified=true;
    Version List=NAVW114.04;
  }
  PROPERTIES
  {
    Target="Job Planning Line"(Table 1003);
  }
  CHANGES
  {
    { Insertion         ;Documentation=BEGIN
                                         EP.01  20160214 Srikanth : Resource if selected then should not be available again.
                                       END;
                                        }
    { CodeModification  ;OriginalCode=BEGIN
                                        ValidateModification(xRec."Planning Date" <> "Planning Date");

                                        Validate("Document Date","Planning Date");
                                        if ("Currency Date" = 0D) or ("Currency Date" = xRec."Planning Date") then
                                        #5..11
                                        else
                                          UpdateReservation(FieldNo("Planning Date"));
                                        "Planned Delivery Date" := "Planning Date";
                                      END;

                         ModifiedCode=BEGIN
                                                                                                      ValidateModification(xRec."Planning Date" <> "Planning Date");
                                        #2..14
                                      END;

                         Target="Planning Date"(Field 3).OnValidate }
    { CodeModification  ;OriginalCode=BEGIN
                                        ValidateModification(xRec."No." <> "No.");

                                        CheckUsageLinkRelations;

                                        #5..28
                                              Res.CheckResourcePrivacyBlocked(false);
                                              Res.TestField(Blocked,false);
                                              Res.TestField("Gen. Prod. Posting Group");
                                              if Description = '' then
                                                Description := Res.Name;
                                              if "Description 2" = '' then
                                                "Description 2" := Res."Name 2";
                                              "Gen. Prod. Posting Group" := Res."Gen. Prod. Posting Group";
                                              "Resource Group No." := Res."Resource Group No.";
                                              Validate("Unit of Measure Code",Res."Base Unit of Measure");
                                            end;
                                          Type::Item:
                                            begin
                                        #42..73
                                              Description := StandardText.Description;
                                            end;
                                        end;

                                        if Type <> Type::Text then
                                          Validate(Quantity);
                                      END;

                         ModifiedCode=BEGIN
                                                                                                      ValidateModification(xRec."No." <> "No.");
                                        #2..31
                                              // EP.01 >>
                                              Res.Posted:=true;
                                              Res.Modify;
                                              // EP.01 <<
                                        #32..35

                                              "Unit Cost" := Res."Unit Cost";
                                              "Unit Price" := Res."Unit Price";

                                              "Gen. Prod. Posting Group" := Res."Gen. Prod. Posting Group";
                                              "Resource Group" := Res."Resource Group No.";
                                              ResourceExist;
                                              FindIncPerct;
                                              Validate("Unit of Measure Code",Res."Base Unit of Measure")
                                        #39..76
                                        if Type <> Type::Text then
                                          Validate(Quantity);
                                      END;

                         Target="No."(Field 7).OnValidate }
    { PropertyInsertion ;Target="No."(Field 7);
                         Property=ValidateTableRelation;
                         ModifiedValue=true }
    { CodeModification  ;OriginalCode=BEGIN
                                        if "Usage Link" then
                                          if not BypassQtyValidation then begin
                                            if ("Qty. Posted" > 0) and (Quantity < "Qty. Posted") then
                                              Error(QtyLessErr,FieldCaption(Quantity),FieldCaption("Qty. Posted"));
                                            if ("Qty. Posted" < 0) and (Quantity > "Qty. Posted") then
                                        #6..11
                                        if ("Qty. Transferred to Invoice" < 0) and (Quantity > "Qty. Transferred to Invoice") then
                                          Error(QtyGreaterErr,FieldCaption(Quantity),FieldCaption("Qty. Transferred to Invoice"));

                                        case Type of
                                          Type::Item:
                                            if not Item.Get("No.") then
                                        #18..38
                                        UpdateReservation(FieldNo(Quantity));

                                        UpdateAllAmounts;
                                        BypassQtyValidation := false;
                                      END;

                         ModifiedCode=BEGIN
                                        //Added as per 3.0
                                        Invsetup.Get;
                                        if Job.Get("Job No.") then
                                        begin
                                          if Job."Sea Days"<>0 then
                                            DayFrac:=Quantity/Job."Sea Days";
                                          Job.SetFilter(Job."Location Filter",Invsetup."Default Cold Room");
                                          Job.SetFilter(Job."No.","Job No.");
                                          Job.CalcSums(Job."Incentive (Pt. Based)",Job."Incentive (Pt. Based) Actual");
                                          Validate(Incentive,Job."Incentive (Pt. Based) Actual"*"Allocation %"*0.01*DayFrac);
                                          //MODIFY(TRUE);
                                          "Alloted %":="Allocation %"*DayFrac;
                                          end;

                                        //Added as per 3.0

                                        if "Usage Link" then
                                          if not BypassQtyPostedValidation then begin
                                        #3..14
                                        BypassQtyPostedValidation := false;

                                        #15..41
                                      END;

                         Target=Quantity(Field 9).OnValidate }
    { Insertion         ;InsertAfter="Service Order No."(Field 5900);
                         ChangedElements=FieldCollection
                         {
                           { 50300;  ;Incentive           ;Decimal       ;OnValidate=BEGIN
                                                                                       "Net Inc":=Incentive+"Hook Inc"+"Add/Ded";
                                                                                     END;
                                                                                      }
                           { 50301;  ;Hook Inc            ;Decimal       ;OnValidate=BEGIN
                                                                                       "Net Inc":=Incentive+"Hook Inc"+"Add/Ded";
                                                                                     END;
                                                                                      }
                           { 50302;  ;Add/Ded             ;Decimal       ;OnValidate=BEGIN
                                                                                       "Net Inc":=Incentive+"Hook Inc"+"Add/Ded";
                                                                                     END;
                                                                                      }
                           { 50303;  ;Net Inc             ;Decimal       ;Editable=false }
                           { 50305;  ;Alloted %           ;Decimal        }
                           { 50308;  ;Allocation Quantity ;Decimal        }
                           { 50309;  ;Allocation %        ;Decimal       ;OnValidate=BEGIN
                                                                                       {
                                                                                       "Allocation Quantity" := 0;
                                                                                       IF "Allocation %" = 0 THEN
                                                                                         Amount := 0;
                                                                                       UpdateAllocations(GenJnlLine);
                                                                                       }
                                                                                     END;

                                                                          CaptionML=ENU=Allocation %;
                                                                          DecimalPlaces=2:2 }
                           { 50314;  ;Ending Date         ;Date          ;OnValidate=BEGIN

                                                                                       case Type of
                                                                                         Type::Resource:
                                                                                           begin
                                                                                             Validate(Quantity,("Ending Date"-"Starting Date"));
                                                                                           end;
                                                                                       end;
                                                                                     END;

                                                                          CaptionML=ENU=Ending Date }
                           { 50315;  ;Resource Group      ;Code20         }
                           { 50317;  ;Counter             ;Integer       ;FieldClass=FlowField;
                                                                          CalcFormula=Count("Job Planning Line" WHERE ("Job No."=FIELD("Job No."),
                                                                                                                       "No."=FILTER(<>'')));
                                                                          Editable=false }
                           { 50318;  ;Ended Voyage        ;Boolean        }
                           { 50319;  ;Starting Date       ;Date          ;OnValidate=BEGIN
                                                                                       case Type of
                                                                                         Type::Resource:
                                                                                           begin
                                                                                             Validate(Quantity,("Ending Date"-"Starting Date"));
                                                                                           end;
                                                                                       end;
                                                                                     END;
                                                                                      }
                           { 50320;  ;Phase Code          ;Code10        ;OnValidate=BEGIN
                                                                                       {IF "Phase Code" <> '' THEN BEGIN
                                                                                         Phase.GET("Phase Code");
                                                                                         Description := Phase.Description;
                                                                                       END;} //dik
                                                                                     END;

                                                                          CaptionML=ENU=Phase Code }
                         }
                          }
    { CodeModification  ;OriginalCode=BEGIN
                                        ValidateModification(true);
                                        CheckRelatedJobPlanningLineInvoice;

                                        #4..13
                                          CalcFields("Reserved Qty. (Base)");
                                          TestField("Reserved Qty. (Base)",0);
                                        end;

                                        if "Schedule Line" then
                                          Job.UpdateOverBudgetValue("Job No.",false,"Total Cost (LCY)");
                                      END;

                         ModifiedCode=BEGIN
                                        #1..16
                                        // EP.01 >>
                                        if Res.Get("No.") then begin
                                          Res.Posted:=false;
                                          Res.Modify;
                                        end;
                                        // EP.01 <<
                                        #17..19
                                      END;

                         Target=OnDelete }
    { CodeModification  ;OriginalCode=BEGIN
                                        LockTable;
                                        GetJob;
                                        if Job.Blocked = Job.Blocked::All then
                                        #4..7
                                        if Quantity <> 0 then
                                          UpdateReservation(0);

                                        if "Schedule Line" then
                                          Job.UpdateOverBudgetValue("Job No.",false,"Total Cost (LCY)");
                                      END;

                         ModifiedCode=BEGIN
                                        #1..10
                                        Job.Get("Job No.");
                                        "Starting Date" := Job."Starting Date";
                                        "Ending Date":=Job."Ending Date";        //AAA-April2002

                                        if Res.Get("No.") then
                                        begin
                                          Res.Posted:=true;
                                         Res.Modify;
                                        end;

                                        if "Schedule Line" then
                                          Job.UpdateOverBudgetValue("Job No.",false,"Total Cost (LCY)");
                                      END;

                         Target=OnInsert }
    { CodeModification  ;OriginalCode=BEGIN
                                        Error(RecordRenameErr,FieldCaption("Job No."),FieldCaption("Job Task No."),TableCaption);
                                      END;

                         ModifiedCode=BEGIN
                                        case Type of
                                          Type::Resource:
                                            begin
                                              if Res.Get("No.") then
                                              begin
                                                Res.Posted:=false;
                                                Res.Modify;
                                                Commit;
                                              end;
                                            end;
                                        end;
                                        Error(RecordRenameErr,FieldCaption("Job No."),FieldCaption("Job Task No."),TableCaption);
                                      END;

                         Target=OnRename }
    { CodeModification  ;OriginalCode=BEGIN
                                        IsHandled := false;
                                        ShouldRetrieveCostPrice := false;
                                        OnBeforeRetrieveCostPrice(Rec,xRec,ShouldRetrieveCostPrice,IsHandled);
                                        if IsHandled then
                                          exit(ShouldRetrieveCostPrice);

                                        case Type of
                                          Type::Item:
                                            ShouldRetrieveCostPrice :=
                                        #10..22
                                            exit(false);
                                        end;
                                        exit(ShouldRetrieveCostPrice);
                                      END;

                         ModifiedCode=BEGIN
                                        #1..5
                                        #7..25
                                      END;

                         Target=RetrieveCostPrice(PROCEDURE 13) }
    { PropertyModification;
                         Target=SetBypassQtyValidation(PROCEDURE 32);
                         Property=Name;
                         OriginalValue=SetBypassQtyValidation;
                         ModifiedValue=SetBypassQtyPostedValidation }
    { CodeModification  ;OriginalCode=BEGIN
                                        BypassQtyValidation := Bypass;
                                      END;

                         ModifiedCode=BEGIN
                                        BypassQtyPostedValidation := Bypass;
                                      END;

                         Target=SetBypassQtyValidation(PROCEDURE 32) }
    { Insertion         ;InsertAfter=DrillDownJobInvoices(PROCEDURE 34);
                         ChangedElements=PROCEDURECollection
                         {
                           [LineStart(55426)]
                           PROCEDURE FindIncPerct@1000000002();
                           BEGIN
                             if Res.Get("No.") then
                              if ResGr.Get(Res."Resource Group No.") then
                                if not ResGr."Crew(Juniour)" then
                                   "Allocation %":=ResGr.IncentivePect
                                else begin
                                   Job.Get("Job No.");
                                   OperatnSetup.Get;
                                   if Job."No. of Deck Hands"<>0 then
                                      "Allocation %" := OperatnSetup."Crew Share Percentage"/Job."No. of Deck Hands";
                                end;
                                //Level:=ResGr.Level;
                           END;

                           [LineStart(55439)]
                           LOCAL PROCEDURE ResourceExist@52();
                           BEGIN
                             JobPlanLine.SetFilter("No.",Res."No.");
                             JobPlanLine.SetRange("Job No.","Job No.");
                             if JobPlanLine.FindFirst then begin
                               Error('Resource Already Exist',FieldCaption("Line No."),"No.");
                             end;
                           END;

                         }
                          }
    { PropertyModification;
                         Target=BypassQtyValidation(Variable 1035);
                         Property=Id;
                         OriginalValue=1035;
                         ModifiedValue=1050 }
    { PropertyModification;
                         Target=UsagePostingDate(Variable 1042);
                         Property=Id;
                         OriginalValue=1042;
                         ModifiedValue=10042 }
    { Insertion         ;InsertAfter=Res(Variable 1006);
                         ChangedElements=VariableCollection
                         {
                           ResGr@1045 : Record "Resource Group";
                         }
                          }
    { Insertion         ;InsertAfter=WorkType(Variable 1009);
                         ChangedElements=VariableCollection
                         {
                           OperatnSetup@1046 : Record "Jobs Setup";
                           Invsetup@1047 : Record "Inventory Setup";
                         }
                          }
    { Insertion         ;InsertAfter=AmountRoundingPrecisionFCY(Variable 1037);
                         ChangedElements=VariableCollection
                         {
                           "---"@10000 : Integer;
                           Incentive@1042 : Decimal;
                           "Starting Date"@1043 : Date;
                           JobPlanLine@1044 : Record "Job Planning Line";
                           DayFrac@1048 : Decimal;
                           Resouce@1049 : Text;
                         }
                          }
    { Insertion         ;InsertAfter=UsagePostingDate(Variable 1042);
                         ChangedElements=VariableCollection
                         {
                           BypassQtyPostedValidation@1035 : Boolean;
                         }
                          }
    { Move              ;Target=LinkedJobLedgerErr(Variable 1033);
                         InsertAfter=JobUsageLinkErr(Variable 1034);
                         IncludeSiblings=LineTypeErr(Variable 1003),QtyToTransferToInvoiceErr(Variable 1005),AutoReserveQst(Variable 1040),NoContractLineErr(Variable 1021),QtyAlreadyTransferredErr(Variable 1038),UsageLinkErr(Variable 1039),QtyGreaterErr(Variable 1041),RequestedDeliveryDateErr(Variable 1026) }
  }
  CODE
  {

    BEGIN
    END.
  }
}

