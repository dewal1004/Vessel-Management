OBJECT Modification "Purchase Line"(Table 39)
{
  OBJECT-PROPERTIES
  {
    Date=20220221D;
    Time=152140.257T;
    Modified=true;
    Version List=NAVW114.27;
  }
  PROPERTIES
  {
    Target="Purchase Line"(Table 39);
  }
  CHANGES
  {
    { PropertyDeletion  ;Target="Buy-from Vendor No."(Field 2);
                         Property=Editable;
                         OriginalValue=false }
    { CodeModification  ;OriginalCode=BEGIN
                                        TestStatusOpen;
                                        IsHandled := false;
                                        OnValidateQuantityOnBeforeDropShptCheck(Rec,xRec,CurrFieldNo,IsHandled);
                                        #4..85
                                        end;

                                        CheckWMS;
                                      END;

                         ModifiedCode=BEGIN
                                        #1..88

                                        //AAA-BPR-Oct2000-Start
                                        "QtytoReceiveAmount(LCY)":="Outstanding Amount (LCY)";
                                        if ("Qty. to Receive"<>"Outstanding Quantity") then
                                                   "QtytoReceiveAmount(LCY)":=Round(("Qty. to Receive"*"Outstanding Amount (LCY)")/"Outstanding Quantity");
                                        //AAA-BPR-Oct2000-Start
                                      END;

                         Target=Quantity(Field 15).OnValidate }
    { PropertyModification;
                         Target="Indirect Cost %"(Field 54);
                         Property=MinValue;
                         OriginalValue=0;
                         ModifiedValue=-100 }
    { CodeModification  ;OriginalCode=BEGIN
                                        TestStatusOpen;
                                        TestField("Quantity Received",0);
                                        TestField("Qty. Received (Base)",0);
                                        TestField("Qty. Rcd. Not Invoiced",0);
                                        TestField("Return Qty. Shipped",0);
                                        TestField("Return Qty. Shipped (Base)",0);
                                        if "Unit of Measure Code" <> xRec."Unit of Measure Code" then begin
                                          TestField("Receipt No.",'');
                                          TestField("Return Shipment No.",'');
                                        #10..47
                                          "Qty. per Unit of Measure" := 0;

                                        Validate(Quantity);
                                      END;

                         ModifiedCode=BEGIN
                                        #1..4
                                        #7..50
                                      END;

                         Target="Unit of Measure Code"(Field 5407).OnValidate }
    { Insertion         ;InsertAfter="Attached Doc Count"(Field 7010);
                         ChangedElements=FieldCollection
                         {
                           { 50005;  ;QtytoReceiveAmount(LCY);Decimal    ;Description=LC }
                           { 50300;  ;Freight(LCY)        ;Decimal        }
                           { 50301;  ;Ancillary(LCY)      ;Decimal        }
                           { 50302;  ;Duty(LCY)           ;Decimal        }
                           { 50303;  ;Insurance(LCY)      ;Decimal        }
                           { 50304;  ;Surcharge Duty(LCY) ;Decimal        }
                           { 50305;  ;Ecowas Duty(LCY)    ;Decimal        }
                           { 50306;  ;CISS(LCY)           ;Decimal        }
                           { 50307;  ;Vat (LCY)           ;Decimal        }
                           { 50308;  ;Clearing(LCY)       ;Decimal        }
                           { 50309;  ;Interest(LCY)       ;Decimal        }
                           { 50310;  ;Duty Rate%          ;Decimal        }
                           { 50320;  ;Total Overhead(LCY) ;Decimal        }
                           { 50321;  ;LandedAmount(LCY)   ;Decimal        }
                           { 50322;  ;Place Order         ;Boolean       ;InitValue=true }
                           { 50330;  ;ActualFreight(LCY)  ;Decimal        }
                           { 50331;  ;ActualAncillary(LCY);Decimal        }
                           { 50332;  ;ActualDuty(LCY)     ;Decimal        }
                           { 50333;  ;ActualInsurance(LCY);Decimal        }
                           { 50334;  ;ActualSurcharge Duty(LCY);Decimal   }
                           { 50335;  ;ActualEcowas Duty(LCY);Decimal      }
                           { 50336;  ;ActualCISS(LCY)     ;Decimal        }
                           { 50337;  ;ActualVat (LCY)     ;Decimal        }
                           { 50338;  ;ActualClearing(LCY) ;Decimal        }
                           { 50339;  ;ActualInterest(LCY) ;Decimal        }
                           { 50340;  ;ActualDuty Rate%    ;Decimal        }
                           { 50341;  ;ActualTotal Overhead(LCY);Decimal   }
                           { 50342;  ;ActualLandedAmount(LCY);Decimal     }
                           { 50350;  ;Previous Purchase Price(LCY);Decimal }
                           { 50351;  ;Quantity Ordered    ;Decimal        }
                           { 50352;  ;Pack Size           ;Code10        ;TableRelation="Unit of Measure" WHERE ("In Use"=CONST(true),
                                                                                                                 "Catch Code"=FILTER(<>''));
                                                                          OnValidate=BEGIN
                                                                                       if UnitOfMeasure.Get("Pack Size") then "Pack Size Code":=UnitOfMeasure."Catch Code";
                                                                                       GenNo;
                                                                                     END;
                                                                                      }
                           { 50353;  ;Brand               ;Code10        ;TableRelation="Reason Code" WHERE ("In Use"=CONST(true),
                                                                                                             Type=CONST(Brands));
                                                                          OnValidate=BEGIN
                                                                                       "Brand Code":=CopyStr(Brand,1,1);
                                                                                       GenNo;
                                                                                     END;
                                                                                      }
                           { 50354;  ;Pack Size Code      ;Code1         ;TableRelation="Unit of Measure" WHERE ("In Use"=CONST(true),
                                                                                                                 "Catch Code"=FILTER(<>'')) }
                           { 50355;  ;Brand Code          ;Code1         ;TableRelation="Reason Code" WHERE ("In Use"=CONST(true),
                                                                                                             Type=CONST(Brands)) }
                           { 50356;  ;ProdCd              ;Code3         ;OnValidate=BEGIN
                                                                                       GenNo;
                                                                                     END;
                                                                                      }
                           { 50360;  ;Original Purc. Order No.;Code20     }
                           { 50362;  ;External Document No.;Code20       ;TableRelation=IF ("Reason Code"=CONST('USAGEFA')) "Fixed Asset" WHERE ("FA Class Code"=FILTER(<>'TRAWLER'))
                                                                                        ELSE IF ("Reason Code"=CONST('USAGERES')) Location WHERE ("Location Type"=FILTER(Residence))
                                                                                        ELSE IF ("Reason Code"=CONST('USAGEVES')) Location WHERE ("Location Type"=FILTER(Vessel))
                                                                                        ELSE IF ("Reason Code"=CONST('USAGEOTR')) "Standard Text" WHERE (Others=CONST(true));
                                                                          CaptionML=ENU=External Document No. }
                           { 50364;  ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                                          OnValidate=BEGIN
                                                                                       // AAA -Feb 2002
                                                                                       //IF "Reason Code"='USAGE' THEN "Gen. Bus. Posting Group":='LOCAL';
                                                                                     END;

                                                                          CaptionML=ENU=Reason Code }
                         }
                          }
    { CodeModification  ;OriginalCode=BEGIN
                                        if ("Document Type" = "Document Type"::"Blanket Order") and
                                           ((Type <> xRec.Type) or ("No." <> xRec."No."))
                                        then begin
                                        #4..11
                                            until PurchLine2.Next = 0;
                                        end;

                                        if ((Quantity <> 0) or (xRec.Quantity <> 0)) and ItemExists(xRec."No.") then
                                          ReservePurchLine.VerifyChange(Rec,xRec);
                                      END;

                         ModifiedCode=BEGIN
                                        #1..14
                                        {
                                        //ReturnCheckReturn.PurchLineModify(Rec,xRec);

                                        ReservePurchLine.VerifyChange(Rec,xRec);

                                        //DistIntegration.RetCheckPurchLineModify(Rec,xRec);

                                        IF "Item Tracking No." <> 0 THEN
                                          ItemTrkgMgtPurchLine.ChangeItemTrackingPurchLine(Rec,xRec);
                                        //AAA-SEPT 17
                                        }  //#1
                                        if ((Quantity <> 0) or (xRec.Quantity <> 0)) and ItemExists(xRec."No.") then
                                          ReservePurchLine.VerifyChange(Rec,xRec);
                                      END;

                         Target=OnModify }
    { PropertyModification;
                         Target=UpdatePrepmtSetupFields(PROCEDURE 102);
                         Property=Attributes;
                         OriginalValue=[[External]]];
                         ModifiedValue= }
    { CodeModification  ;OriginalCode=BEGIN
                                        if "Document Type" = "Document Type"::"Blanket Order" then
                                          exit;

                                        #4..45
                                              TotalAmtToAssign -= ItemChargeAssgntPurch."Amount to Assign";
                                            end;
                                            ItemChargeAssgntPurch.Modify;
                                          until ItemChargeAssgntPurch.Next = 0;
                                          CalcFields("Qty. to Assign");
                                        end;
                                      END;

                         ModifiedCode=BEGIN
                                        #1..48
                                           until ItemChargeAssgntPurch.Next = 0;
                                          CalcFields("Qty. to Assign");
                                        end;
                                      END;

                         Target=UpdateItemChargeAssgnt(PROCEDURE 5807) }
    { Insertion         ;InsertAfter=TestReturnFieldsZero(PROCEDURE 86);
                         ChangedElements=PROCEDURECollection
                         {
                           [LineStart(15025)]
                           PROCEDURE "-----"@1000000000();
                           BEGIN
                           END;

                           [LineStart(15028)]
                           PROCEDURE Addon@1000000001();
                           BEGIN
                           END;

                           [LineStart(15031)]
                           PROCEDURE GenNo@1000000002();
                           BEGIN
                             if (ProdCd<>'') and
                                ("Pack Size Code"<>'') and
                                ("Brand Code"<>'')
                             then
                                "No.":=ProdCd+"Pack Size Code"+"Brand Code";
                           END;

                           [LineStart(15038)]
                           PROCEDURE ItemAvailability@211(AvailabilityType@1000 : 'Date,Variant,Location,Bin');
                           BEGIN
                             TestField(Type,Type::Item);
                             TestField("No.");
                             Item.Reset;
                             Item.Get("No.");
                             Item.SetRange("No.","No.");
                             Item.SetRange("Date Filter",0D,"Expected Receipt Date");

                             case AvailabilityType of
                               AvailabilityType::Date:
                                 begin
                                   Item.SetRange("Variant Filter","Variant Code");
                                   Item.SetRange("Location Filter","Location Code");
                                   Item.SetRange("Bin Filter","Bin Code");
                                   Clear(ItemAvailByDate);
                                   ItemAvailByDate.LookupMode(true);
                                   ItemAvailByDate.SetRecord(Item);
                                   ItemAvailByDate.SetTableView(Item);
                                   if ItemAvailByDate.RunModal = ACTION::LookupOK then
                                     if "Expected Receipt Date" <> ItemAvailByDate.GetLastDate then
                                       if Confirm(
                                            Text014,true,FieldCaption("Expected Receipt Date"),
                                            "Expected Receipt Date",ItemAvailByDate.GetLastDate)
                                       then
                                         Validate("Expected Receipt Date",ItemAvailByDate.GetLastDate);
                                 end;
                               AvailabilityType::Variant:
                                 begin
                                   Item.SetRange("Location Filter","Location Code");
                                   Item.SetRange("Bin Filter","Bin Code");
                                   Clear(ItemAvailByVar);
                                   ItemAvailByVar.LookupMode(true);
                                   ItemAvailByVar.SetRecord(Item);
                                   ItemAvailByVar.SetTableView(Item);
                                   if ItemAvailByVar.RunModal = ACTION::LookupOK then
                                     if "Variant Code" <> ItemAvailByVar.GetLastVariant then
                                       if Confirm(
                                            Text014,true,FieldCaption("Variant Code"),"Variant Code",
                                            ItemAvailByVar.GetLastVariant)
                                       then
                                         Validate("Variant Code",ItemAvailByVar.GetLastVariant);
                                 end;
                               AvailabilityType::Location:
                                 begin
                                   Item.SetRange("Variant Filter","Variant Code");
                                   Item.SetRange("Bin Filter","Bin Code");
                                   Clear(ItemAvailByLoc);
                                   ItemAvailByLoc.LookupMode(true);
                                   ItemAvailByLoc.SetRecord(Item);
                                   ItemAvailByLoc.SetTableView(Item);
                                   if ItemAvailByLoc.RunModal = ACTION::LookupOK then
                                     if "Location Code" <> ItemAvailByLoc.GetLastLocation then
                                       if Confirm(
                                            Text014,true,FieldCaption("Location Code"),"Location Code",
                                            ItemAvailByLoc.GetLastLocation)
                                       then
                                         Validate("Location Code",ItemAvailByLoc.GetLastLocation);
                                 end;
                             end;
                           END;

                         }
                          }
    { Insertion         ;InsertAfter=GLAcc(Variable 1025);
                         ChangedElements=VariableCollection
                         {
                           Item@1045 : Record Item;
                         }
                          }
    { Insertion         ;InsertAfter=PurchSetupRead(Variable 1096);
                         ChangedElements=VariableCollection
                         {
                           "--------"@1101 : Text[30];
                           PurSetup@1100 : Record "Purchases & Payables Setup";
                           PVariance@1099 : Record "ASL Payroll Setup";
                           PVarianceX@1098 : Record "ASL Payroll Setup";
                           PG@10097 : Integer;
                           ".................."@1104 : Integer;
                           ItemAvailByDate@1102 : Page "Item Availability by Periods";
                           Text014@1103 : TextConst 'ENU=Change %1 from %2 to %3?';
                           ItemAvailByVar@1105 : Page "Item Availability by Variant";
                           ItemAvailByLoc@1107 : Page "Item Availability by Location";
                           ItemTrackingLines@1106 : Page "Item Tracking Lines";
                         }
                          }
  }
  CODE
  {

    BEGIN
    END.
  }
}

