OBJECT Modification Job(Table 167)
{
  OBJECT-PROPERTIES
  {
    Date=20220218D;
    Time=131247.617T;
    Modified=true;
    Version List=NAVW114.23;
  }
  PROPERTIES
  {
    Target=Job(Table 167);
  }
  CHANGES
  {
    { PropertyModification;
                         Target=DropDown(FieldGroup 1);
                         Property=Fields;
                         OriginalValue="No.",Description,"Bill-to Customer No.","Starting Date",Status;
                         ModifiedValue="No.",Description,"Bill-to Customer No.","Starting Date",Status,"Ending Date" }
    { CodeModification  ;OriginalCode=BEGIN
                                        if "No." <> xRec."No." then begin
                                          JobsSetup.Get;
                                          NoSeriesMgt.TestManual(JobsSetup."Job Nos.");
                                          "No. Series" := '';
                                        end;
                                      END;

                         ModifiedCode=BEGIN
                                        #1..5
                                        //Status := Status::Planning;
                                      END;

                         Target="No."(Field 1).OnValidate }
    { PropertyModification;
                         Target="Bill-to Customer No."(Field 5);
                         Property=TableRelation;
                         OriginalValue=Customer;
                         ModifiedValue=IF (Vessel=FILTER(<>'')) Customer WHERE ("Operation Type"=CONST(true))
                                       ELSE IF (Vessel=FILTER('')) Customer WHERE ("Operation Type"=CONST(false)) }
    { CodeModification  ;OriginalCode=BEGIN
                                        CheckDate;
                                      END;

                         ModifiedCode=BEGIN
                                         if ("Ending Date"<>0D) and ("Starting Date"<>0D) then
                                         "Sea Days":="Ending Date"-"Starting Date";
                                         if Vessel<>'' then
                                          if Loc.Get(Vessel) then
                                          begin
                                            Loc.ETD:="Starting Date";
                                            Loc.ETA:="Ending Date";
                                            Loc.Modify;
                                          end;

                                         CheckDate;
                                      END;

                         Target="Starting Date"(Field 13).OnValidate }
    { PropertyModification;
                         Target="Starting Date"(Field 13);
                         Property=CaptionML;
                         OriginalValue=ENU=Starting Date;
                         ModifiedValue=ENU=ETD }
    { PropertyInsertion ;Target="Starting Date"(Field 13);
                         Property=FieldClass;
                         ModifiedValue=Normal }
    { CodeModification  ;OriginalCode=BEGIN
                                        CheckDate;
                                      END;

                         ModifiedCode=BEGIN

                                        if ("Ending Date"<>0D) and ("Starting Date"<>0D) then
                                        "Sea Days":="Ending Date"-"Starting Date";
                                        if Vessel<>'' then
                                          if Loc.Get(Vessel) then
                                          begin
                                            Loc.ETD:="Starting Date";
                                            Loc.ETA:="Ending Date";
                                            Loc.Modify;
                                          end;
                                        CheckDate;
                                      END;

                         Target="Ending Date"(Field 14).OnValidate }
    { PropertyModification;
                         Target="Ending Date"(Field 14);
                         Property=CaptionML;
                         OriginalValue=ENU=Ending Date;
                         ModifiedValue=ENU=ETA }
    { CodeModification  ;OriginalCode=BEGIN
                                        if xRec.Status <> Status then begin
                                          if Status = Status::Completed then
                                            Validate(Complete,true);
                                          if xRec.Status = xRec.Status::Completed then
                                            if DIALOG.Confirm(StatusChangeQst) then
                                              Validate(Complete,false)
                                            else
                                              Status := xRec.Status;
                                          Modify;
                                          JobPlanningLine.SetCurrentKey("Job No.");
                                          JobPlanningLine.SetRange("Job No.","No.");
                                        #12..17
                                            PerformAutoReserve(JobPlanningLine);
                                          end;
                                        end;
                                      END;

                         ModifiedCode=BEGIN
                                        GenSetup.Get;
                                        if UserId<>GenSetup.Administrator then
                                        begin
                                          if Status = xRec.Status then
                                           exit;

                                         if Status < xRec.Status then
                                           Error(Text001);
                                        end;

                                        #1..8
                                           if (Status = Status::Completed) and (CopyStr(Job."No.",1,1)='J') then
                                           TestField("Voyage Ended",true);
                                        #9..20
                                      END;

                         Target=Status(Field 19).OnValidate }
    { Insertion         ;OnValidate=BEGIN
                                      if "Person Responsible" = '' then
                                        exit;

                                      SetRange("Person Responsible",Res."No.");
                                      if Res.Get("Person Responsible") then
                                        Validate(Captain, Res.Name);

                                      JobTask.SetRange(JobTask."Job No.","No.");
                                      JobTask.SetRange(JobTask."Job Task No.",'temp');
                                      if JobTask.FindFirst then begin
                                        InitPlanningLines;
                                      end else begin
                                        JobTask.Init;
                                        JobTask."Job No." := "No.";
                                        JobTask."Job Task No." := 'temp';
                                        JobTask."Job Task Type" := JobTask."Job Task Type"::Posting;
                                        JobTask."Job Posting Group" := 'OPERATION';
                                        JobTask.Description := Description;
                                        JobTask.Insert(true);
                                        InitPlanningLines;
                                      end;
                                    END;

                         Target="Person Responsible"(Field 20) }
    { PropertyModification;
                         Target="Person Responsible"(Field 20);
                         Property=TableRelation;
                         OriginalValue=Resource WHERE (Type=CONST(Person));
                         ModifiedValue=IF (Vessel=FILTER(<>'')) Resource WHERE ("Resource Group No."=CONST('SKIP'))
                                       ELSE IF (Vessel=FILTER('')) Resource WHERE ("Resource Group No."=CONST('CENG')) }
    { PropertyModification;
                         Target="Person Responsible"(Field 20);
                         Property=CaptionML;
                         OriginalValue=ENU=Person Responsible;
                         ModifiedValue=ENU=Skipper }
    { PropertyInsertion ;Target="Global Dimension 2 Code"(Field 22);
                         Property=NotBlank;
                         ModifiedValue=true }
    { Insertion         ;InsertAfter=Id(Field 8000);
                         ChangedElements=FieldCollection
                         {
                           { 50001;  ;0                   ;Decimal        }
                           { 50002;  ;1                   ;Decimal       ;TableRelation="Job Ledger Entry" WHERE ("Job No."=FIELD("1")) }
                           { 50003;  ;2                   ;Decimal       ;TableRelation="Job Ledger Entry" WHERE ("Job No."=FIELD("2")) }
                           { 50137;  ;Task Filter         ;Code10        ;FieldClass=FlowFilter;
                                                                          TableRelation=Task;
                                                                          CaptionML=ENU=Task Filter }
                           { 50300;  ;Vessel              ;Code10        ;TableRelation=Location.Code;
                                                                          OnValidate=BEGIN
                                                                                       //Bin01

                                                                                       CheckStatus;

                                                                                       if FA.Get(Vessel) then
                                                                                       "Global Dimension 2 Code":=FA."Global Dimension 2 Code"
                                                                                       else
                                                                                        if Loc.Get(Vessel) then "Global Dimension 2 Code":=Loc."Shortcut Dimension 2 Code";
                                                                                       //BIN02

                                                                                       //Date Initiatn
                                                                                       if Loc.Get(Vessel) then
                                                                                       begin
                                                                                         "Lst Ovh":=Loc."Lst Ovh";
                                                                                         "Lst Ddk":=Loc."Lst Ddk";
                                                                                          xx1:=Loc.xx1;
                                                                                          Deratg:=Loc.Deratg;
                                                                                         "Rad Tel":=Loc."Rad Tel";
                                                                                         "Str Lic":=Loc."Str Lic";
                                                                                         "Life Rf":=Loc."Life Rf";
                                                                                         "Fom Ext":=Loc."Fom Ext";
                                                                                         "Pow Ext":=Loc."Pow Ext";
                                                                                         "CO2 Ext":=Loc."CO2 Ext";
                                                                                         "Life Jacket":=Loc."Life Jacket";
                                                                                         "Life Buoy":=Loc."Life Buoy";
                                                                                          Parchut:=Loc.Parchut;
                                                                                         "R Flare":=Loc."R Flare";
                                                                                         "Store Taking":=Loc."Store Taking";
                                                                                         "Crew Briefing":= Loc."Crew Briefing";
                                                                                         "Nxt Ovh":=Loc."Nxt Ovh";
                                                                                         "Nxt Ddk":=Loc."Nxt Ddk";
                                                                                         "Description 2":=FA.Description;
                                                                                          xx2:=Loc.xx2;
                                                                                         "Brnd Pk":=Loc."Brnd Pk";
                                                                                         "Inner P":=Loc."Inner P";
                                                                                          Grades:=Loc.Grades;
                                                                                         "Crab CW":=Loc."Crab CW";
                                                                                         "WT GL/W":=Loc."WT GL/W";
                                                                                          Batch:=Loc.Batch;
                                                                                         "E.U. No":=Loc."E.U. No";
                                                                                         "Fsh Ins":=Loc."Fsh Ins";
                                                                                         "Fsh Dst":=Loc."Fsh Dst";
                                                                                         "Ins Sur":=Loc."Ins Sur";
                                                                                         "Dst Sur":=Loc."Dst Sur";

                                                                                          Captain:=Loc."Port Captain";
                                                                                         //Update Location Code
                                                                                         Loc."Current Operation":="No.";
                                                                                         Loc."Current Voyage":="Voyage No.";
                                                                                         Loc.Modify;
                                                                                       end;
                                                                                       Validate(Description,Vessel+' '+"Voyage No.");

                                                                                       if JobSetup.Get()  then
                                                                                         "Job Posting Group":=JobSetup."Posting group"
                                                                                       else
                                                                                         "Job Posting Group":='OPERATION';
                                                                                       //Nitin
                                                                                       {Loc.GET(Vessel);
                                                                                       VALIDATE("Global Dimension 2 Code",Loc."Shortcut Dimension 2 Code");
                                                                                       VALIDATE("Bill-to Customer No.",Loc."Shortcut Dimension 2 Code");}
                                                                                       //BIN03

                                                                                       //Create Job Journal batch;

                                                                                       JJourBat.Init;
                                                                                       JJourBat."Journal Template Name":='RECURRING';
                                                                                       JJourBat.Name:=Vessel;
                                                                                       if not JJourBat.Insert() then JJourBat.Modify();

                                                                                       if Vessel <> '' then
                                                                                         Status := Status::Planning;
                                                                                     END;
                                                                                      }
                           { 50301;  ;Fishing Country Code;Code10        ;TableRelation="Country/Region" }
                           { 50302;  ;Points              ;Decimal       ;DecimalPlaces=0:5;
                                                                          Editable=false }
                           { 50303;  ;Global Dimension 1 Filter;Code20   ;FieldClass=FlowFilter;
                                                                          TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(1));
                                                                          CaptionML=ENU=Global Dimension 1 Filter;
                                                                          CaptionClass='1,3,1' }
                           { 50304;  ;Global Dimension 2 Filter;Code20   ;FieldClass=FlowFilter;
                                                                          TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(2));
                                                                          CaptionML=ENU=Global Dimension 2 Filter;
                                                                          CaptionClass='1,3,2' }
                           { 50305;  ;Location Filter     ;Code10        ;FieldClass=FlowFilter;
                                                                          TableRelation=Location;
                                                                          CaptionML=ENU=Location Filter }
                           { 50306;  ;Bin Filter          ;Code10        ;FieldClass=FlowFilter;
                                                                          TableRelation=Bin.Code WHERE ("Location Code"=FIELD("Location Filter"));
                                                                          CaptionML=ENU=Bin Filter }
                           { 50307;  ;Variant Filter      ;Code10        ;FieldClass=FlowFilter;
                                                                          TableRelation="Item Variant".Code WHERE ("Item No."=FIELD("No."));
                                                                          CaptionML=ENU=Variant Filter }
                           { 50308;  ;Day Lost Location Filter;Option    ;FieldClass=FlowFilter;
                                                                          InitValue=SEA;
                                                                          OptionString=SEA,PORT }
                           { 50309;  ;Day Lost Cause Filter;Code10       ;FieldClass=FlowFilter }
                           { 50310;  ;Fishing Area        ;Code10        ;Editable=false }
                           { 50311;  ;Sea Temperature     ;Code10        ;Editable=false }
                           { 50312;  ;Lost Days           ;Decimal       ;FieldClass=FlowField;
                                                                          CalcFormula=Sum("Comment Line"."Days Lost" WHERE ("Table Name"=CONST(Job),
                                                                                                                            "No."=FIELD("No."),
                                                                                                                            Date=FIELD("Date Filter"),
                                                                                                                            "Day Lost Cause"=FIELD("Day Lost Cause Filter"),
                                                                                                                            "Day Lost Location"=FIELD("Day Lost Location Filter")));
                                                                          DecimalPlaces=0:2;
                                                                          Editable=false }
                           { 50313;false;Size Packed      ;Code10        ;TableRelation="Unit of Measure" WHERE ("In Use"=CONST(true),
                                                                                                                 "Catch Code"=FILTER(<>'')) }
                           { 50314;false;Brand Packed     ;Code10        ;TableRelation="Reason Code" WHERE ("In Use"=CONST(true),
                                                                                                             Type=FILTER(Brands)) }
                           { 50315;  ;Voyage No.          ;Code10        ;OnValidate=BEGIN

                                                                                       Validate(Description,Vessel+' '+"Voyage No.");
                                                                                       if JJourBat.Get('RECURRING',Vessel) then
                                                                                       begin
                                                                                          JJourBat."Voyage No.":="Voyage No.";
                                                                                          JJourBat.Modify;
                                                                                       end;

                                                                                       if Loc.Get(Vessel) then
                                                                                       begin
                                                                                          Loc."Current Voyage":="Voyage No.";
                                                                                          Loc.Modify;
                                                                                       end;

                                                                                       GenSetup.Get;
                                                                                       if UserId<>GenSetup.Administrator then
                                                                                       if ("Voyage No."<>xRec."Voyage No.") and (xRec."Voyage No."<>'') then
                                                                                       begin
                                                                                         JLedEnt.SetRange(JLedEnt."Job No.","No.");
                                                                                         if JLedEnt.Find('-') then
                                                                                           Error(
                                                                                             Text300,
                                                                                             TableCaption,"No.");
                                                                                       end;
                                                                                     END;

                                                                          NotBlank=true }
                           { 50316;  ;Sea Days            ;Integer       ;Editable=false }
                           { 50317;  ;No. of Deck Hands   ;Integer        }
                           { 50318;  ;Voyage Sea Days     ;Option        ;OptionString=" ","40","45","60" }
                           { 50322;  ;Points Sort Bay     ;Decimal       ;Description=To retain Value from calculated field points in prep for sorting the records }
                           { 50330;  ;Incentive Pts Determt Actual;Decimal;
                                                                          Description=Required to find the incentive point rate }
                           { 50331;  ;Incentive Rate Actual;Decimal       }
                           { 50332;  ;Incentive (Pt. Based) Actual;Decimal }
                           { 50334;  ;Total Incentive Actual;Decimal      }
                           { 50336;  ;Net Incentive Actual;Decimal        }
                           { 50339;  ;Points Actual       ;Decimal       ;DecimalPlaces=0:5 }
                           { 50340;  ;Incentive Points Determinant;Decimal;
                                                                          Description=Required to find the incentive point rate;
                                                                          Editable=false }
                           { 50341;  ;Incentive Rate      ;Decimal        }
                           { 50342;  ;Incentive (Pt. Based);Decimal       }
                           { 50343;  ;Incentive (Hook Fish);Decimal      ;FieldClass=FlowField;
                                                                          CalcFormula=Sum("Job Planning Line"."Hook Inc" WHERE ("Job No."=FIELD("No."))) }
                           { 50344;  ;Total Incentive     ;Decimal        }
                           { 50345;  ;Add/Ded. Crew       ;Decimal       ;FieldClass=FlowField;
                                                                          CalcFormula=Sum("Job Planning Line"."Add/Ded" WHERE ("Job No."=FIELD("No."))) }
                           { 50346;  ;Net Incentive       ;Decimal        }
                           { 50347;  ;Fom Ext             ;Date          ;Description=Foam Extinguisher;
                                                                          Editable=false }
                           { 50348;  ;Pow Ext             ;Date          ;Description=Powder Extinguisher;
                                                                          Editable=false }
                           { 50349;  ;CO2 Ext             ;Date          ;Description=CO2 Extinguisher;
                                                                          Editable=false }
                           { 50352;  ;Nxt Ovh             ;Date          ;Editable=false }
                           { 50353;  ;Nxt Ddk             ;Date          ;Editable=false }
                           { 50354;  ;xx2                 ;Date          ;Editable=false }
                           { 50355;  ;Life Jacket         ;Date          ;Editable=false }
                           { 50356;  ;Life Buoy           ;Date          ;Editable=false }
                           { 50357;  ;Parchut             ;Date          ;Description=Parachute;
                                                                          Editable=false }
                           { 50358;  ;R Flare             ;Date          ;Description=Red Hand Flare;
                                                                          Editable=false }
                           { 50359;  ;Store Taking        ;Date          ;Editable=false }
                           { 50360;  ;Crew Briefing       ;Date          ;Editable=false }
                           { 50361;  ;Location Group      ;Integer       ;Editable=false }
                           { 50370;  ;Captain             ;Code20        ;Editable=true }
                           { 50373;  ;Brnd Pk             ;Code10        ;Editable=false }
                           { 50374;  ;Inner P             ;Code10        ;Editable=false }
                           { 50375;  ;Grades              ;Code10        ;Editable=false }
                           { 50376;  ;Crab CW             ;Code10        ;Editable=false }
                           { 50377;  ;WT GL/W             ;Code10        ;Editable=false }
                           { 50378;  ;Batch               ;Code10        ;Editable=false }
                           { 50380;  ;E.U. No             ;Code10        ;Editable=false }
                           { 50385;  ;Ves Age             ;Integer       ;Editable=false }
                           { 50390;  ;Lst Ovh             ;Date          ;Editable=false }
                           { 50391;  ;Lst Ddk             ;Date          ;Editable=false }
                           { 50392;  ;xx1                 ;Date          ;Editable=false }
                           { 50393;  ;Deratg              ;Date          ;Description=Derating Certificate;
                                                                          Editable=false }
                           { 50394;  ;Rad Tel             ;Date          ;Description=Radio Telephony;
                                                                          Editable=false }
                           { 50395;  ;Str Lic             ;Date          ;Description=Storage License;
                                                                          Editable=false }
                           { 50396;  ;Life Rf             ;Date          ;Description=Life Rafts;
                                                                          Editable=false }
                           { 50400;  ;Fsh Ins             ;Date          ;Editable=false }
                           { 50410;  ;Fsh Dst             ;Date          ;Editable=false }
                           { 50420;  ;Ins Sur             ;Date          ;Editable=false }
                           { 50421;  ;Dst Sur             ;Date          ;Editable=false }
                           { 50450;  ;Voyage Ended        ;Boolean       ;Description=Ticked when a voyage end is generated }
                           { 50451;  ;NoCatchExist        ;Boolean       ;FieldClass=FlowField;
                                                                          CalcFormula=Exist("Job Ledger Entry" WHERE ("Job No."=FIELD("No."),
                                                                                                                      "Location Code"=FIELD("Location Filter"),
                                                                                                                      "Posting Date"=FIELD("Date Filter"),
                                                                                                                      Type=CONST(Resource))) }
                           { 50460;  ;Gen. Product PG Filter;Code10      ;FieldClass=FlowFilter;
                                                                          TableRelation="Gen. Product Posting Group" }
                           { 50461;  ;Deductible Lost Days;Decimal       ;FieldClass=FlowField;
                                                                          CalcFormula=Sum("Comment Line"."Days Lost" WHERE (Deductible=CONST(true),
                                                                                                                            "Table Name"=CONST(Job),
                                                                                                                            "No."=FIELD("No.")));
                                                                          DecimalPlaces=0:2;
                                                                          Editable=false }
                           { 50462;  ;AvgPtSortBay        ;Decimal        }
                           { 50463;  ;Fuel Consumed       ;Decimal       ;Editable=false }
                           { 50464;  ;Fuel Days           ;Decimal       ;OnValidate=BEGIN
                                                                                       if "Fuel Days"<>0 then  "Fuel Average":="Fuel Consumed"/"Fuel Days";
                                                                                     END;

                                                                          DecimalPlaces=0:0;
                                                                          Editable=false }
                           { 50465;  ;Comsumed Value      ;Decimal       ;DecimalPlaces=0:5 }
                           { 50466;  ;Fuel Average        ;Decimal       ;OnValidate=BEGIN
                                                                                       if "Fuel Average"<>0 then "Fuel Days":="Fuel Consumed"/"Fuel Average";
                                                                                     END;

                                                                          Editable=false }
                           { 50500;  ;Product Quantity    ;Decimal       ;DecimalPlaces=0:5 }
                           { 50501;  ;Cycle Day (Manual)  ;Decimal       ;DecimalPlaces=0:2 }
                           { 50502;  ;Fishing Day (Manual);Decimal       ;DecimalPlaces=0:2 }
                           { 50503;  ;Lost At Sea (Manual);Decimal       ;FieldClass=Normal;
                                                                          DecimalPlaces=0:2 }
                           { 50504;  ;Port Day (Manual)   ;Decimal       ;DecimalPlaces=0:2 }
                           { 50510;  ;Deductible Lost Days (Incentiv;Decimal;
                                                                          DecimalPlaces=0:2;
                                                                          Description=For Incentive report Use }
                           { 50520;  ;Kilo Actual         ;Decimal       ;DecimalPlaces=0:5 }
                           { 50521;  ;Checked             ;Boolean        }
                           { 50532;  ;Price Group Code    ;Code10        ;TableRelation="Customer Price Group" }
                           { 50533;  ;Revenue per Sea Day ;Decimal       ;Description=Revenue per Fishing Day }
                           { 50534;  ;Date Filter         ;Date          ;FieldClass=FlowFilter }
                           { 50535;  ;Job No              ;Integer       ;FieldClass=Normal }
                         }
                          }
    { PropertyInsertion ;Target="No."(Key);
                         Property=SumIndexFields;
                         ModifiedValue="Points Sort Bay" }
    { Insertion         ;InsertAfter=Status(Key);
                         ChangedElements=KeyCollection
                         {
                           {    ;Vessel,"Starting Date"                  ;SumIndexFields="Lost At Sea (Manual)","Fishing Day (Manual)","Port Day (Manual)" }
                           {    ;"Voyage No."                             }
                           {    ;"Ending Date"                            }
                           {    ;"Points Sort Bay",Status                 }
                           {    ;"Person Responsible"                     }
                           {    ;Vessel,Status                            }
                           {    ;"Fishing Country Code",AvgPtSortBay      }
                           {    ;"Fishing Country Code","Ending Date"     }
                           {    ;Vessel,"Person Responsible"              }
                           {    ;Vessel,"Voyage Ended"                    }
                           {    ;"Voyage Sea Days",Vessel                 }
                           {    ;"Voyage Sea Days","Revenue per Sea Day",Vessel }
                           {    ;AvgPtSortBay                             }
                           {    ;Captain,"Points Sort Bay","Voyage Ended";SumIndexFields="Points Sort Bay" }
                           {    ;Captain,Vessel,"Points Sort Bay",Status ;SumIndexFields="Points Sort Bay" }
                         }
                          }
    { Insertion         ;Target=OnInsert;
                         ChangedElements=VariableCollection
                         {
                           Resource@1000 : Record Resource;
                         }
                          }
    { CodeModification  ;OriginalCode=BEGIN
                                        JobsSetup.Get;

                                        if "No." = '' then begin
                                        #4..17
                                        if "Job Posting Group" = '' then
                                          Validate("Job Posting Group",JobsSetup."Default Job Posting Group");
                                        Validate("WIP Posting Method",JobsSetup."Default WIP Posting Method");

                                        DimMgt.UpdateDefaultDim(
                                          DATABASE::Job,"No.",
                                          "Global Dimension 1 Code","Global Dimension 2 Code");
                                        InitWIPFields;

                                        "Creation Date" := Today;
                                        "Last Date Modified" := "Creation Date";

                                        if ("Project Manager" <> '') and (Status = Status::Open) then
                                          AddToMyJobs("Project Manager");
                                      END;

                         ModifiedCode=BEGIN
                                        #1..20
                                        //"Global Dimension 2 Code":='ATLANTIC';     //AAA - Oct 2002
                                        #22..25
                                        // "Starting Date":=TODAY;
                                                       if Vessel<>'' then
                                                          "Ending Date":=CalcDate('+50D',Today);
                                                       "Creation Date":=Today;
                                        #27..31
                                      END;

                         Target=OnInsert }
    { CodeModification  ;OriginalCode=BEGIN
                                        if "Bill-to Customer No." <> '' then begin
                                          Cust.Get("Bill-to Customer No.");
                                          Cust.TestField("Customer Posting Group");
                                          Cust.TestField("Bill-to Customer No.",'');
                                          if Cust."Privacy Blocked" then
                                            Error(Cust.GetPrivacyBlockedGenericErrorText(Cust));
                                          if Cust.Blocked = Cust.Blocked::All then
                                            Error(
                                              BlockedCustErr,
                                              FieldCaption("Bill-to Customer No."),
                                        #11..45
                                        end;

                                        OnAfterUpdateBillToCust(Rec);
                                      END;

                         ModifiedCode=BEGIN
                                        #1..6
                                          if Cust.Blocked = Cust.Blocked::Ship then
                                        #8..48
                                      END;

                         Target=UpdateCust(PROCEDURE 4) }
    { Insertion         ;InsertAfter=UpdateJobTaskDimension(PROCEDURE 22);
                         ChangedElements=PROCEDURECollection
                         {
                           [LineStart(28783)]
                           PROCEDURE CheckStatus@1000000001();
                           BEGIN
                             //AAA-Aug 2002-Start
                             //Test To see that no operation for the vessel is on the Voyage Start Status
                             if Status<3 then
                             begin
                               Jobs.SetCurrentKey(Jobs.Vessel,Jobs.Status);
                               Jobs.SetRange(Jobs.Vessel,Vessel);
                               Jobs.SetRange(Jobs.Status,Status);
                               Jobs.SetFilter(Jobs."No.",'<>%1',"No.");
                               //  MESSAGE('Total record %1 for %2 at %3',Jobs.COUNT,Vessel,Status);
                               if (Jobs.Find('-')) then //AND (Jobs.COUNT>1) THEN
                                 Error('This vessel cannot have multiple operation\'
                                       +'running on this status, Please, close one\'
                                       +'or more Operations on this desired status\'
                                       +'and try again');
                             end;
                             //AAA-Aug 2002-Start
                           END;

                           [LineStart(28801)]
                           PROCEDURE "------------------------"@1000000005();
                           BEGIN
                           END;

                           [LineStart(28804)]
                           PROCEDURE PointZ@1000000006(JobNo@1000000000 : Code[10];LocFilter@1000000001 : Text[100];DateFilter@1000000002 : Text[100];PhaseFilter@1000000003 : Text[100];TaskFilter@1000000004 : Text[100];StepFilter@1000000005 : Text[100];Vssl@1000000006 : Code[10]) : Decimal;
                           VAR
                             JobLedgEntry@1000000007 : Record "Job Ledger Entry";
                             TotalPrice@1000000009 : Decimal;
                           BEGIN
                             TotalPrice := 0;
                             JobLedgEntry.SetCurrentKey("Job No.","Location Code",
                               "Work Type Code","Posting Date",Type,"Gen. Prod. Posting Group");
                             JobLedgEntry.SetFilter(JobLedgEntry."Job No.",JobNo);
                             if LocFilter <> '' then
                               JobLedgEntry.SetFilter(JobLedgEntry."Location Code",'%1',LocFilter);
                             if DateFilter <> '' then
                               JobLedgEntry.SetFilter(JobLedgEntry."Posting Date",DateFilter);
                             JobLedgEntry.SetFilter(JobLedgEntry."Journal Batch Name",'%1',Vssl);
                             JobLedgEntry.SetRange(JobLedgEntry.Type,JobLedgEntry.Type::Item);
                             JobLedgEntry.SetFilter(JobLedgEntry."Gen. Prod. Posting Group",'%1|%2','FIS','');
                             if TaskFilter <> '' then
                               JobLedgEntry.SetRange("Task Code",TaskFilter);
                             if JobLedgEntry.Find('-') then begin
                               repeat
                                 TotalPrice := TotalPrice + JobLedgEntry."Total Price";
                               until JobLedgEntry.Next = 0;
                               exit(-TotalPrice);
                             end else
                               exit(0);
                           END;

                           [LineStart(28826)]
                           PROCEDURE PointsActual@1000000007(JobNo@1000000006 : Code[10];DateFilter@1000000004 : Text[100];PhaseFilter@1000000003 : Text[100];TaskFilter@1000000002 : Text[100];StepFilter@1000000001 : Text[100]) : Decimal;
                           VAR
                             JobLedgEntry@1000000007 : Record "Job Ledger Entry";
                             TotalPrice@1000000009 : Decimal;
                           BEGIN
                             TotalPrice := 0;
                             JobLedgEntry.SetCurrentKey("Job No.","Location Code",
                               "Work Type Code","Posting Date",Type,"Gen. Prod. Posting Group");
                             JobLedgEntry.SetFilter(JobLedgEntry."Job No.",JobNo);
                             JobLedgEntry.SetFilter(JobLedgEntry."Location Code",'CRM-ASL');
                             if DateFilter <> '' then
                               JobLedgEntry.SetFilter(JobLedgEntry."Posting Date",DateFilter);
                             //JobLedgEntry.SETFILTER(JobLedgEntry."Journal Batch Name",'%1',Vssl);
                             JobLedgEntry.SetRange(JobLedgEntry.Type,JobLedgEntry.Type::Item);
                             JobLedgEntry.SetFilter(JobLedgEntry."Gen. Prod. Posting Group",'%1|%2','FIS','');
                             if TaskFilter <> '' then
                               JobLedgEntry.SetRange("Task Code",TaskFilter);
                             if JobLedgEntry.Find('-') then begin
                               repeat
                                 TotalPrice := TotalPrice + JobLedgEntry."Total Price";
                               until JobLedgEntry.Next = 0;
                               exit(-TotalPrice);
                             end else
                               exit(0);
                           END;

                           [LineStart(28847)]
                           PROCEDURE LostDaysz@1000000008(JobNo@1000000004 : Code[10];DateFilter@1000000003 : Text[100];DayLostCauseFilter@1000000002 : Text[100];DayLostLocFilter@1000000001 : Text[100]) : Decimal;
                           VAR
                             CommentLine@1000000000 : Record "Comment Line";
                             DaysLost@1000000005 : Decimal;
                           BEGIN
                             {DaysLost := 0;
                             CommentLine.SETCURRENTKEY("Global Dimension 1 Code","Global Dimension 2 Code",Date,
                                 "Day Lost Cause","Day Lost Location",Vessel);
                             CommentLine.SETRANGE(CommentLine."Table Name",CommentLine."Table Name"::Job);
                             CommentLine.SETFILTER(CommentLine."No.",JobNo);
                             IF DayLostCauseFilter <> '' THEN
                               CommentLine.SETFILTER(CommentLine."Day Lost Cause",DayLostCauseFilter);
                             IF DayLostLocFilter <> '' THEN
                               CommentLine.SETFILTER(CommentLine."Day Lost Location",DayLostLocFilter);
                             IF DateFilter <> '' THEN
                               CommentLine.SETFILTER(CommentLine.Date,DateFilter);
                             IF CommentLine.FIND('-') THEN BEGIN
                               REPEAT
                                 DaysLost := DaysLost + CommentLine."Days Lost";
                               UNTIL CommentLine.NEXT = 0;
                               EXIT(DaysLost);
                             END ELSE
                               EXIT(0);
                             }
                           END;

                           [LineStart(28868)]
                           PROCEDURE ConsumedValue@1000000023(JobNo@1000000000 : Code[10];LocFilter@1000000001 : Text[100];DateFilter@1000000002 : Text[100]) : Decimal;
                           VAR
                             ValuEntry@1000000007 : Record "Value Entry";
                             CostPostedGL@1000000009 : Decimal;
                           BEGIN
                             CostPostedGL := 0;
                             ValuEntry.SetCurrentKey("Document No.","Location Code","Posting Date","Gen. Prod. Posting Group");
                             ValuEntry.SetFilter(ValuEntry."Document No.",JobNo);
                             if LocFilter <> '' then
                               ValuEntry.SetFilter(ValuEntry."Location Code",'%1',LocFilter);
                             if DateFilter <> '' then
                               ValuEntry.SetFilter(ValuEntry."Posting Date",DateFilter);
                             ValuEntry.SetFilter(ValuEntry."Gen. Prod. Posting Group",'<>%1','FIS');
                             if ValuEntry.Find('-') then begin
                               repeat
                                 CostPostedGL := CostPostedGL + ValuEntry."Cost Posted to G/L";
                               until ValuEntry.Next = 0;
                               exit(-CostPostedGL);
                             end else
                               exit(0);
                           END;

                           [LineStart(28885)]
                           PROCEDURE ProductQty@1000000021(JobNo@1000000006 : Code[10];DateFilter@1000000004 : Text[100];PhaseFilter@1000000003 : Text[100];TaskFilter@1000000002 : Text[100];StepFilter@1000000001 : Text[100]) : Decimal;
                           VAR
                             JobLedgEntry@1000000007 : Record "Job Ledger Entry";
                             Qty@1000000009 : Decimal;
                           BEGIN
                             Qty := 0;
                             JobLedgEntry.SetCurrentKey("Job No.","Location Code",
                               "Work Type Code","Posting Date",Type,"Gen. Prod. Posting Group");
                             JobLedgEntry.SetFilter(JobLedgEntry."Job No.",JobNo);
                             JobLedgEntry.SetFilter(JobLedgEntry."Location Code",'CRM-ASL');
                             if DateFilter <> '' then
                               JobLedgEntry.SetFilter(JobLedgEntry."Posting Date",DateFilter);
                             if JobLedgEntry.Find('-') then begin
                               repeat
                                 Qty := Qty + JobLedgEntry.Quantity;
                               until JobLedgEntry.Next = 0;
                               exit(-Qty);
                             end else
                               exit(0);
                           END;

                           [LineStart(28901)]
                           PROCEDURE KiloActual@1000000020(JobNo@1000000006 : Code[10];DateFilter@1000000004 : Text[100];PhaseFilter@1000000003 : Text[100];TaskFilter@1000000002 : Text[100];StepFilter@1000000001 : Text[100]) : Decimal;
                           VAR
                             JobLedgEntry@1000000007 : Record "Job Ledger Entry";
                             Qty@1000000009 : Decimal;
                           BEGIN
                             Qty := 0;
                             JobLedgEntry.SetCurrentKey("Job No.","Location Code",
                               "Work Type Code","Posting Date",Type,"Gen. Prod. Posting Group");
                             JobLedgEntry.SetFilter(JobLedgEntry."Job No.",JobNo);
                             JobLedgEntry.SetFilter(JobLedgEntry."Location Code",'CRM-ASL');
                             if DateFilter <> '' then
                               JobLedgEntry.SetFilter(JobLedgEntry."Posting Date",DateFilter);
                             //JobLedgEntry.SETFILTER(JobLedgEntry."Journal Batch Name",'%1',Vssl);
                             JobLedgEntry.SetRange(JobLedgEntry.Type,JobLedgEntry.Type::Item);
                             JobLedgEntry.SetFilter(JobLedgEntry."Gen. Prod. Posting Group",'%1|%2','FIS','');
                             if JobLedgEntry.Find('-') then begin
                               repeat
                                 Qty := Qty + JobLedgEntry.Quantity;
                               until JobLedgEntry.Next = 0;
                               exit(-Qty);
                             end else
                               exit(0);
                           END;

                           [LineStart(28920)]
                           PROCEDURE FishArea@51(JobNo@1000000006 : Code[10];GlobalDim1@1000000000 : Text[100];GlobalDim2@1000000005 : Text[100];LocFilter@1000000008 : Text[100];VarFilter@1000000010 : Text[100];BinFilter@1000000011 : Text[100];DateFilter@1000000004 : Text[100];PhaseFilter@1000000003 : Text[100];TaskFilter@1000000002 : Text[100];StepFilter@1000000001 : Text[100]) : Code[10];
                           VAR
                             JobLedgEntry@1000000007 : Record "Job Ledger Entry";
                             Qty@1000000009 : Decimal;
                           BEGIN
                             JobLedgEntry.SetCurrentKey("Job No.","Location Code","Posting Date",
                               "Global Dimension 1 Code","Global Dimension 2 Code","Variant Code","Bin Code");
                             JobLedgEntry.SetFilter(JobLedgEntry."Job No.",JobNo);
                             if GlobalDim1 <> '' then
                               JobLedgEntry.SetFilter(JobLedgEntry."Global Dimension 1 Code",'%1',GlobalDim1);
                             if GlobalDim2 <> '' then
                               JobLedgEntry.SetFilter(JobLedgEntry."Global Dimension 2 Code",'%1',GlobalDim2);
                             if VarFilter <> '' then
                               JobLedgEntry.SetFilter(JobLedgEntry."Variant Code",'%1',VarFilter);
                             if BinFilter <> '' then
                               JobLedgEntry.SetFilter(JobLedgEntry."Bin Code",'%1',BinFilter);
                             if LocFilter <> '' then
                               JobLedgEntry.SetFilter(JobLedgEntry."Location Code",'%1',LocFilter);
                             if DateFilter <> '' then
                               JobLedgEntry.SetFilter(JobLedgEntry."Posting Date",DateFilter);
                             if JobLedgEntry.Find('+') then
                               exit('')
                             else
                               exit('');
                           END;

                           [LineStart(28941)]
                           PROCEDURE SeaTemperature@50(JobNo@1000000006 : Code[10];GlobalDim1@1000000000 : Text[100];GlobalDim2@1000000005 : Text[100];LocFilter@1000000008 : Text[100];VarFilter@1000000010 : Text[100];BinFilter@1000000011 : Text[100];DateFilter@1000000004 : Text[100];PhaseFilter@1000000003 : Text[100];TaskFilter@1000000002 : Text[100];StepFilter@1000000001 : Text[100]) : Code[10];
                           VAR
                             JobLedgEntry@1000000007 : Record "Job Ledger Entry";
                           BEGIN
                             JobLedgEntry.SetCurrentKey("Job No.","Location Code","Posting Date","Global Dimension 1 Code","Global Dimension 2 Code","Variant Code","Bin Code");
                             JobLedgEntry.SetFilter(JobLedgEntry."Job No.",JobNo);
                             if GlobalDim1 <> '' then
                               JobLedgEntry.SetFilter(JobLedgEntry."Global Dimension 1 Code",'%1',GlobalDim1);
                             if GlobalDim2 <> '' then
                               JobLedgEntry.SetFilter(JobLedgEntry."Global Dimension 2 Code",'%1',GlobalDim2);
                             if VarFilter <> '' then
                               JobLedgEntry.SetFilter(JobLedgEntry."Variant Code",'%1',VarFilter);
                             if BinFilter <> '' then
                               JobLedgEntry.SetFilter(JobLedgEntry."Bin Code",'%1',BinFilter);
                             if LocFilter <> '' then
                               JobLedgEntry.SetFilter(JobLedgEntry."Location Code",'%1',LocFilter);
                             if DateFilter <> '' then
                               JobLedgEntry.SetFilter(JobLedgEntry."Posting Date",DateFilter);
                             if JobLedgEntry.Find('+') then
                               exit('')
                             else
                               exit('');
                           END;

                           [LineStart(28961)]
                           PROCEDURE InitPlanningLines@47();
                           BEGIN
                             if Res.Get("Person Responsible") and (Res.Posted=true)
                                 then Error('Employee already posted')
                             else
                             begin
                               JobplanLine.SetRange(JobplanLine."Job No.","No.");
                               JobplanLine.SetRange(JobplanLine."Job Task No.",'temp');
                               if JobplanLine.FindLast then
                                 LineNo := JobplanLine."Line No.";
                                 JobplanLine.Init;
                                 JobplanLine."Line No." := LineNo + 1000;
                                 JobplanLine."Job No." := "No.";
                                 JobplanLine."Job Task No." := JobTask."Job Task No.";
                                 JobplanLine.Validate(JobplanLine.Type,JobplanLine.Type::Resource);
                                 JobplanLine.Validate(JobplanLine."No.","Person Responsible");
                                 JobplanLine.Validate(JobplanLine."Document No.",'TEST123');
                                 JobplanLine."Starting Date" := "Starting Date";
                                 JobplanLine."Ending Date" := "Ending Date";
                                 JobplanLine.Insert;
                             end;
                             if "Person Responsible"='' then
                             begin

                             end;

                             //A Skipper could be replace otherwise we would have said there should only be on skipper on a vessel
                           END;

                           [LineStart(28988)]
                           PROCEDURE FishingArea@46(JobNo@1000000000 : Code[10];LocFilter@1000000001 : Text[100];DateFilter@1000000002 : Text[100];PhaseFilter@1000000003 : Text[100];TaskFilter@1000000004 : Text[100];StepFilter@1000000005 : Text[100];Vssl@1000000006 : Code[10]) : Code[20];
                           VAR
                             JobLedgEntry@1000000007 : Record "Job Ledger Entry";
                             FishArea1@1000 : Code[20];
                           BEGIN
                             FishArea1 := '';
                             JobLedgEntry.SetCurrentKey("Job No.","Location Code",
                               "Work Type Code","Posting Date",Type,"Gen. Prod. Posting Group");
                             JobLedgEntry.SetFilter(JobLedgEntry."Job No.",JobNo);
                             if LocFilter <> '' then
                               JobLedgEntry.SetFilter(JobLedgEntry."Location Code",'%1',LocFilter);
                             if DateFilter <> '' then
                               JobLedgEntry.SetFilter(JobLedgEntry."Posting Date",DateFilter);
                             JobLedgEntry.SetFilter(JobLedgEntry."Journal Batch Name",'%1',Vssl);
                             JobLedgEntry.SetRange(JobLedgEntry.Type,JobLedgEntry.Type::Item);
                             //JobLedgEntry.SETFILTER(JobLedgEntry."Gen. Prod. Posting Group",'%1|%2','FIS','');
                             if TaskFilter <> '' then
                               JobLedgEntry.SetRange("Task Code",TaskFilter);
                             if JobLedgEntry.Find('-') then begin
                               repeat
                                 FishArea1 := JobLedgEntry."Phase Code";
                               until JobLedgEntry.Next = 0;
                               exit(FishArea1);
                             end else
                               exit('');
                           END;

                         }
                          }
    { PropertyModification;
                         Target=RunWIPFunctionsQst(Variable 1028);
                         Property=Id;
                         OriginalValue=1028;
                         ModifiedValue=10028 }
    { PropertyModification;
                         Target=ReservationEntriesDeleteQst(Variable 1022);
                         Property=Id;
                         OriginalValue=1022;
                         ModifiedValue=10022 }
    { PropertyModification;
                         Target=ReservationEntriesExistErr(Variable 1027);
                         Property=Id;
                         OriginalValue=1027;
                         ModifiedValue=10027 }
    { PropertyModification;
                         Target=AutoReserveNotPossibleMsg(Variable 1029);
                         Property=Id;
                         OriginalValue=1029;
                         ModifiedValue=10029 }
    { Insertion         ;InsertAfter=UpdateJobTaskDimQst(Variable 1026);
                         ChangedElements=VariableCollection
                         {
                           FA@1028 : Record "Fixed Asset";
                           Loc@1029 : Record Location;
                           JobSetup@1030 : Record "Jobs Setup";
                           JJourBat@1031 : Record "Job Journal Batch";
                           Jobs@1032 : Record Job;
                           "------AAA-Nov2001"@1042 : Text[30];
                           JobsRec@1039 : Record Job;
                           Res@1037 : Record Resource;
                           GenSetup@1035 : Record "General Ledger Setup";
                           JLedEnt@1034 : Record "Job Ledger Entry";
                           Days@1033 : Date;
                           ResPrice@1036 : Record "Resource Price";
                           CommentLine@1038 : Record "Comment Line";
                           ChangeJobStatus@1040 : Boolean;
                           Text300@1027 : TextConst 'ENU=You cannot modify a voyage that has been posted to';
                           JobplanLine@1041 : Record "Job Planning Line";
                           JobTask@1043 : Record "Job Task";
                           LineNo@1044 : Integer;
                           Text001@1045 : TextConst 'ENU=You cannot change a job to its previous status.';
                           Text002@1046 : TextConst 'ENU=Please note that you cannot change a job to its previous';
                         }
                          }
  }
  CODE
  {

    BEGIN
    END.
  }
}

