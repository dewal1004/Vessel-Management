OBJECT Modification "Workflow Step"(Table 1502)
{
  OBJECT-PROPERTIES
  {
    Date=20240319D;
    Time=120000T;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    Target="Workflow Step"(Table 1502);
  }
  CHANGES
  {
    { CodeModification  ;OriginalCode=BEGIN
                                        TestField(Type,Type::"Event");
                                        TestField("Function Name");

                                        #4..11
                                        if UserClickedOK and (ReturnFilters <> CurrentEventFilters) then begin
                                          CheckEditingIsAllowed;
                                          if ReturnFilters = WorkflowEvent.CreateDefaultRequestPageFilters then
                                            DeleteEventConditions
                                          else begin
                                            if IsNullGuid(Argument) then
                                              CreateEventArgument(WorkflowStepArgument,Rec);
                                            WorkflowStepArgument.SetEventFilters(ReturnFilters);
                                          end;
                                        end;
                                      END;

                         ModifiedCode=BEGIN
                                        #1..14
                                            DeleteEventArgument(Rec)
                                        #16..21
                                      END;

                         Target=OpenEventConditions(PROCEDURE 17) }
    { CodeModification  ;OriginalCode=BEGIN
                                        TestField("Workflow Code");
                                        TestField(ID);
                                        WorkflowStep.TestField("Workflow Code");
                                        WorkflowStep.TestField(ID);

                                        FindWorkflowRules(ThisWorkflowRule);
                                        WorkflowStep.FindWorkflowRules(OtherWorkflowRule);

                                        exit((ThisWorkflowRule.Count <= 1) and (ThisWorkflowRule.Count = OtherWorkflowRule.Count) and
                                          (ThisWorkflowRule."Field No." = OtherWorkflowRule."Field No.") and
                                          (ThisWorkflowRule.Operator = OtherWorkflowRule.Operator))
                                      END;

                         ModifiedCode=BEGIN
                                        #1..8
                                        exit((ThisWorkflowRule.Count = 1 ) and (ThisWorkflowRule.Count = OtherWorkflowRule.Count) and
                                          (ThisWorkflowRule."Field No." = OtherWorkflowRule."Field No.") and
                                          (ThisWorkflowRule.Operator = OtherWorkflowRule.Operator))
                                      END;

                         Target=CompareEventRule(PROCEDURE 21) }
    { Deletion          ;Target=GetDescription(PROCEDURE 1).WorkflowEvent(Variable 1001);
                         ChangedElements=VariableCollection
                         {
                           WorkflowEvent@1001 : Record "Workflow Event";
                         }
                          }
    { Deletion          ;Target=GetDescription(PROCEDURE 1).WorkflowStepArgument(Variable 1003);
                         ChangedElements=VariableCollection
                         {
                           WorkflowStepArgument@1003 : Record "Workflow Step Argument";
                         }
                          }
    { Deletion          ;Target=GetDescription(PROCEDURE 1).WorkflowResponseHandling(Variable 1002);
                         ChangedElements=VariableCollection
                         {
                           WorkflowResponseHandling@1002 : Codeunit "Workflow Response Handling";
                         }
                          }
    { CodeModification  ;OriginalCode=BEGIN
                                        case Type of
                                          WorkflowStep.Type::"Event":
                                            if WorkflowEvent.Get("Function Name") then
                                              exit(WorkflowEvent.Description);
                                          WorkflowStep.Type::Response:
                                            if WorkflowStepArgument.Get(Argument) then
                                              exit(WorkflowResponseHandling.GetDescription(WorkflowStepArgument));
                                        end;
                                        exit('');
                                      END;

                         ModifiedCode=BEGIN
                                        case Type of
                                          WorkflowStep.Type::"Event":
                                            exit(GetEventDescription);
                                          WorkflowStep.Type::Response:
                                            exit(GetResponseDescription);
                                          else
                                            exit('');
                                        end;
                                      END;

                         Target=GetDescription(PROCEDURE 1) }
    { CodeModification  ;OriginalCode=BEGIN
                                        TestField("Workflow Code");
                                        TestField(ID);
                                        WorkflowRule.SetRange("Workflow Code","Workflow Code");
                                        WorkflowRule.SetRange("Workflow Step ID",ID);
                                        WorkflowRule.SetRange("Workflow Step Instance ID",ZeroGuid);
                                        exit(WorkflowRule.FindSet);
                                      END;

                         ModifiedCode=BEGIN
                                        #1..5
                                        exit(not WorkflowRule.IsEmpty);
                                      END;

                         Target=FindWorkflowRules(PROCEDURE 19) }
    { CodeModification  ;OriginalCode=BEGIN
                                        WorkflowStep.SetRange(ID,"Previous Workflow Step ID");
                                        WorkflowStep.SetRange("Workflow Code","Workflow Code");
                                        WorkflowStep.SetRange(Type,WorkflowStep.Type::"Event");

                                        if WorkflowStep.FindFirst then
                                        #6..12
                                          until WorkflowStep.Next = 0;

                                        exit(false);
                                      END;

                         ModifiedCode=BEGIN
                                        WorkflowStep.SetRange(ID,"Previous Workflow Step ID");
                                        #3..15
                                      END;

                         Target=HasParentEvent(PROCEDURE 23) }
    { Insertion         ;InsertAfter=CreateEventArgument(PROCEDURE 9);
                         ChangedElements=PROCEDURECollection
                         {
                           [LineStart(63810)]
                           LOCAL PROCEDURE DeleteEventArgument@6(VAR WorkflowStep@1001 : Record "Workflow Step");
                           VAR
                             WorkflowStepArgument@1000 : Record "Workflow Step Argument";
                             ZeroGUID@1002 : GUID;
                           BEGIN
                             WorkflowStep.TestField(Type,WorkflowStep.Type::"Event");

                             WorkflowStepArgument.Get(WorkflowStep.Argument);
                             WorkflowStepArgument.Delete(true);

                             WorkflowStep.Argument := ZeroGUID;
                             WorkflowStep.Modify(true);
                           END;

                         }
                          }
    { Insertion         ;InsertAfter=GetDescription(PROCEDURE 1);
                         ChangedElements=PROCEDURECollection
                         {
                           [LineStart(63840)]
                           PROCEDURE GetEventDescription@10() : Text[250];
                           VAR
                             WorkflowEvent@1000 : Record "Workflow Event";
                           BEGIN
                             if Type <> Type::"Event" then
                               exit('');

                             if not WorkflowEvent.Get("Function Name") then
                               exit('');

                             exit(WorkflowEvent.Description);
                           END;

                           [LineStart(63849)]
                           PROCEDURE GetResponseDescription@80() : Text[250];
                           VAR
                             WorkflowStepArgument@1001 : Record "Workflow Step Argument";
                             WorkflowResponseHandling@1002 : Codeunit "Workflow Response Handling";
                           BEGIN
                             if Type <> Type::Response then
                               exit('');

                             if not WorkflowStepArgument.Get(Argument) then
                               exit('');

                             exit(WorkflowResponseHandling.GetDescription(WorkflowStepArgument));
                           END;

                         }
                          }
  }
  CODE
  {

    BEGIN
    END.
  }
}

