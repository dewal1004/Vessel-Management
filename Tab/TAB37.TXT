OBJECT Modification "Sales Line"(Table 37)
{
  OBJECT-PROPERTIES
  {
    Date=20220221D;
    Time=093226.357T;
    Modified=true;
    Version List=NAVW114.26;
  }
  PROPERTIES
  {
    Target="Sales Line"(Table 37);
  }
  CHANGES
  {
    { PropertyModification;
                         Target="Document Type"(Field 1);
                         Property=OptionCaptionML;
                         OriginalValue=ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order;
                         ModifiedValue=ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order,Appraisal }
    { PropertyModification;
                         Target="Document Type"(Field 1);
                         Property=OptionString;
                         OriginalValue=Quote,Order,Invoice,"Credit Memo","Blanket Order","Return Order";
                         ModifiedValue=Quote,Order,Invoice,"Credit Memo","Blanket Order","Return Order",Appraisal }
    { PropertyModification;
                         Target=Type(Field 5);
                         Property=OptionCaptionML;
                         OriginalValue=ENU=" ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)";
                         ModifiedValue=ENU=" ,G/L Account,Item,Resource,Fixed Asset,Charge (Item),Skill,Performance" }
    { PropertyModification;
                         Target=Type(Field 5);
                         Property=OptionString;
                         OriginalValue=" ","G/L Account",Item,Resource,"Fixed Asset","Charge (Item)";
                         ModifiedValue=" ","G/L Account",Item,Resource,"Fixed Asset","Charge (Item)",Skill,Performance }
    { CodeModification  ;OriginalCode=BEGIN
                                        GetSalesSetup;

                                        "No." := FindOrCreateRecordByNo("No.");
                                        #4..6
                                        CheckItemAvailable(FieldNo("No."));

                                        if (xRec."No." <> "No.") and (Quantity <> 0) then begin
                                          TestField("Qty. to Asm. to Order (Base)",0);
                                          CalcFields("Reserved Qty. (Base)");
                                          TestField("Reserved Qty. (Base)",0);
                                          if Type = Type::Item then
                                            WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                          OnValidateNoOnAfterVerifyChange(Rec,xRec);
                                        #16..36
                                          "Recalculate Invoice Disc." := true;
                                        Type := TempSalesLine.Type;
                                        "No." := TempSalesLine."No.";
                                        OnValidateNoOnCopyFromTempSalesLine(Rec,TempSalesLine);
                                        if "No." = '' then
                                          exit;

                                        if HasTypeToFillMandatoryFields then
                                        #45..53
                                        "Promised Delivery Date" := SalesHeader."Promised Delivery Date";
                                        "Requested Delivery Date" := SalesHeader."Requested Delivery Date";
                                        "Shipment Date" :=
                                          CalendarMgmt.CalcDateBOC(
                                            '',SalesHeader."Shipment Date",CalChange."Source Type"::Location,"Location Code",'',
                                            CalChange."Source Type"::"Shipping Agent","Shipping Agent Code","Shipping Agent Service Code",false);

                                        #61..70
                                          Type::"G/L Account":
                                            CopyFromGLAccount;
                                          Type::Item:
                                            CopyFromItem;
                                          Type::Resource:
                                            CopyFromResource;
                                          Type::"Fixed Asset":
                                            CopyFromFixedAsset;
                                          Type::"Charge (Item)":
                                            CopyFromItemCharge;
                                        end;

                                        OnAfterAssignFieldsForNo(Rec,xRec,SalesHeader);
                                        #84..86
                                          PostingSetupMgt.CheckGenPostingSetupCOGSAccount("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
                                          PostingSetupMgt.CheckVATPostingSetupSalesAccount("VAT Bus. Posting Group","VAT Prod. Posting Group");
                                        end;

                                        if HasTypeToFillMandatoryFields and (Type <> Type::"Fixed Asset") then
                                          Validate("VAT Prod. Posting Group");
                                        #93..96
                                          Validate("Unit of Measure Code");
                                          if Quantity <> 0 then begin
                                            InitOutstanding;
                                            if IsCreditDocType then
                                              InitQtyToReceive
                                            else
                                              InitQtyToShip;
                                            InitQtyToAsm;
                                            UpdateWithWarehouseShip;
                                          end;
                                          UpdateUnitPrice(FieldNo("No."));
                                        end;

                                        OnValidateNoOnAfterUpdateUnitPrice(Rec,xRec);

                                        CreateDim(
                                        #113..127
                                        end;

                                        UpdateItemCrossRef;
                                      END;

                         ModifiedCode=BEGIN
                                        #1..9
                                        TestField("Qty. to Asm. to Order (Base)",0);
                                          CalcFields("Reserved Qty. (Base)");
                                         TestField("Reserved Qty. (Base)",0);
                                        #13..39
                                        OnValidateNoOnCopyFromTempSalesLine(Rec,TempSalesLine);                                                                                       if "No." = '' then
                                        #42..56
                                         CalendarMgmt.CalcDateBOC(
                                        #58..73
                                           CopyFromItem;

                                        #75..79
                                        CopyFromItemCharge;
                                        #81..89
                                        if (Type <> Type::" ") and (Type<6)  then begin
                                        #90..99

                                            if IsCreditDocType then

                                        #101..108
                                        #110..130
                                        end;
                                      END;

                         Target="No."(Field 6).OnValidate }
    { CodeModification  ;OriginalCode=BEGIN
                                        TestJobPlanningLine;
                                        TestStatusOpen;
                                        CheckAssocPurchOrder(FieldCaption("Location Code"));
                                        #4..61

                                        CheckWMS;

                                        if "Document Type" = "Document Type"::"Return Order" then
                                          ValidateReturnReasonCode(FieldNo("Location Code"));
                                      END;

                         ModifiedCode=BEGIN
                                        #1..64
                                        if "Document Type" = "Document Type"::Appraisal then
                                          ValidateReturnReasonCode(FieldNo("Location Code"));
                                      END;

                         Target="Location Code"(Field 7).OnValidate }
    { PropertyModification;
                         Target="Location Code"(Field 7);
                         Property=TableRelation;
                         OriginalValue=Location WHERE ("Use As In-Transit"=CONST(false));
                         ModifiedValue=Location WHERE ("Use As In-Transit"=CONST(false),
                                                       "Location Type"=FILTER(Store)) }
    { CodeModification  ;OriginalCode=BEGIN
                                        TestStatusOpen;
                                        WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                        if CurrFieldNo <> 0 then
                                        #4..25
                                        AutoAsmToOrder;
                                        if (xRec."Shipment Date" <> "Shipment Date") and
                                           (Quantity <> 0) and
                                           not StatusCheckSuspended
                                        then
                                          CheckDateConflict.SalesLineCheck(Rec,CurrFieldNo <> 0);

                                        if not PlannedShipmentDateCalculated then
                                          "Planned Shipment Date" := CalcPlannedShptDate(FieldNo("Shipment Date"));
                                        if not PlannedDeliveryDateCalculated then
                                          "Planned Delivery Date" := CalcPlannedDeliveryDate(FieldNo("Shipment Date"));
                                      END;

                         ModifiedCode=BEGIN
                                        #1..28
                                           (Reserve <> Reserve::Never) and
                                        #29..36
                                      END;

                         Target="Shipment Date"(Field 10).OnValidate }
    { CodeModification  ;OriginalCode=BEGIN
                                        if Type = Type::" " then
                                          exit;

                                        #4..15
                                                Item.SetRange(Blocked,false);
                                                Item.SetRange("Sales Blocked",false);

                                                // looking for an item with exact description
                                                Item.SetRange(Description,Description);
                                                if Item.FindFirst then begin
                                                  Validate("No.",Item."No.");
                                                  exit;
                                                end;

                                                // looking for an item with similar description
                                                Item.SetFilter(Description,'''@' + ConvertStr(Description,'''','?') + '''');
                                                if Item.FindFirst then begin
                                                  Validate("No.",Item."No.");
                                        #30..70
                                               ["Document Type"::Order,"Document Type"::Invoice,"Document Type"::Quote,"Document Type"::"Credit Memo"]
                                            then
                                              Error(CannotFindDescErr,Type,Description);
                                      END;

                         ModifiedCode=BEGIN
                                        #1..18
                                                 //looking for an item with exact description
                                        #20..25
                                                 //looking for an item with similar description
                                        #27..73
                                      END;

                         Target=Description(Field 11).OnValidate }
    { PropertyModification;
                         Target="Description 2"(Field 12);
                         Property=Data type;
                         OriginalValue=Text50;
                         ModifiedValue=Text100 }
    { CodeModification  ;OriginalCode=BEGIN
                                        TestJobPlanningLine;
                                        TestStatusOpen;

                                        #4..6
                                          CheckShipmentRelation
                                        else
                                          if "Return Receipt No." <> '' then
                                            CheckRetRcptRelation;

                                        "Quantity (Base)" := CalcBaseQty(Quantity);

                                        OnValidateQuantityOnAfterCalcBaseQty(Rec,xRec);

                                        if IsCreditDocType then begin
                                          if (Quantity * "Return Qty. Received" < 0) or
                                             ((Abs(Quantity) < Abs("Return Qty. Received")) and ("Return Receipt No." = ''))
                                          then
                                        #20..42
                                        AddOnIntegrMgt.CheckReceiptOrderStatus(Rec);
                                        if (xRec.Quantity <> Quantity) or (xRec."Quantity (Base)" <> "Quantity (Base)") then begin
                                          InitOutstanding;
                                          if IsCreditDocType then
                                            InitQtyToReceive
                                          else
                                            InitQtyToShip;
                                          InitQtyToAsm;
                                        #51..92
                                        UpdatePlanned;
                                        if "Document Type" = "Document Type"::"Return Order" then
                                          ValidateReturnReasonCode(FieldNo(Quantity));
                                      END;

                         ModifiedCode=BEGIN

                                        #1..9
                                           CheckRetRcptRelation;
                                        #11..16

                                        #17..45

                                          if IsCreditDocType then
                                                    InitQtyToReceive
                                        #48..95
                                      END;

                         Target=Quantity(Field 15).OnValidate }
    { CodeModification  ;OriginalCode=BEGIN
                                        Validate("Line Discount %");
                                      END;

                         ModifiedCode=BEGIN
                                        Validate("Line Discount %");

                                        userrec.Get(UserId); //Nitin
                                        if not userrec."Sales Price" then
                                        Error('You are not Authorized to Change');
                                      END;

                         Target="Unit Price"(Field 22).OnValidate }
    { CodeModification  ;OriginalCode=BEGIN
                                        if (CurrFieldNo = FieldNo("Unit Cost (LCY)")) and
                                           ("Unit Cost (LCY)" <> xRec."Unit Cost (LCY)")
                                        then
                                        #4..8
                                          TestJobPlanningLine;
                                          GetItem(Item);
                                          if (Item."Costing Method" = Item."Costing Method"::Standard) and not IsShipment then begin
                                            if IsCreditDocType then
                                              Error(
                                                Text037,
                                        #15..31
                                              Currency."Unit-Amount Rounding Precision")
                                        end else
                                          "Unit Cost" := "Unit Cost (LCY)";
                                      END;

                         ModifiedCode=BEGIN
                                        #1..11

                                        #12..34
                                        if "Gen. Prod. Posting Group" = 'FIS' then
                                          begin
                                            "Unit Cost" := 0;
                                            "Unit Cost (LCY)" := 0;
                                          end; //AAA
                                      END;

                         Target="Unit Cost (LCY)"(Field 23).OnValidate }
    { CodeModification  ;OriginalCode=BEGIN
                                        if xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group" then
                                          if GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") then
                                            Validate("VAT Bus. Posting Group",GenBusPostingGrp."Def. VAT Bus. Posting Group");
                                      END;

                         ModifiedCode=BEGIN
                                        if Type<6 then //AAA
                                        #1..3
                                      END;

                         Target="Gen. Bus. Posting Group"(Field 74).OnValidate }
    { CodeModification  ;OriginalCode=BEGIN
                                        TestJobPlanningLine;
                                        TestStatusOpen;
                                        if xRec."Gen. Prod. Posting Group" <> "Gen. Prod. Posting Group" then
                                          if GenProdPostingGrp.ValidateVatProdPostingGroup(GenProdPostingGrp,"Gen. Prod. Posting Group") then
                                            Validate("VAT Prod. Posting Group",GenProdPostingGrp."Def. VAT Prod. Posting Group");
                                      END;

                         ModifiedCode=BEGIN
                                        if Type<6 then //AAA
                                        #1..5
                                      END;

                         Target="Gen. Prod. Posting Group"(Field 75).OnValidate }
    { CodeModification  ;OriginalCode=BEGIN
                                        GetSalesHeader;
                                        OnGetDeferralPostDate(SalesHeader,DeferralPostDate,Rec);
                                        if DeferralPostDate = 0D then
                                        #4..8
                                          GetDeferralAmount,DeferralPostDate,
                                          Description,SalesHeader."Currency Code");

                                        if "Document Type" = "Document Type"::"Return Order" then
                                          "Returns Deferral Start Date" :=
                                            DeferralUtilities.GetDeferralStartDate(DeferralUtilities.GetSalesDeferralDocType,
                                              "Document Type","Document No.","Line No.","Deferral Code",SalesHeader."Posting Date");
                                      END;

                         ModifiedCode=BEGIN
                                        #1..11
                                        if "Document Type" = "Document Type"::Appraisal then
                                        #13..15
                                      END;

                         Target="Deferral Code"(Field 1700).OnValidate }
    { CodeModification  ;OriginalCode=BEGIN
                                        TestJobPlanningLine;
                                        TestStatusOpen;
                                        TestField("Quantity Shipped",0);
                                        TestField("Qty. Shipped (Base)",0);
                                        TestField("Return Qty. Received",0);
                                        TestField("Return Qty. Received (Base)",0);
                                        if "Unit of Measure Code" <> xRec."Unit of Measure Code" then begin
                                          TestField("Shipment No.",'');
                                          TestField("Return Receipt No.",'');
                                        #10..62
                                            "Qty. per Unit of Measure" := 1;
                                        end;
                                        Validate(Quantity);
                                      END;

                         ModifiedCode=BEGIN
                                        #1..4
                                        #7..65
                                      END;

                         Target="Unit of Measure Code"(Field 5407).OnValidate }
    { PropertyInsertion ;Target="Substitution Available"(Field 5702);
                         Property=Enabled;
                         ModifiedValue=false }
    { PropertyInsertion ;Target="Qty. to Assign"(Field 5801);
                         Property=Enabled;
                         ModifiedValue=false }
    { PropertyInsertion ;Target="Qty. Assigned"(Field 5802);
                         Property=Enabled;
                         ModifiedValue=false }
    { Insertion         ;InsertAfter="Attached Doc Count"(Field 7010);
                         ChangedElements=FieldCollection
                         {
                           { 50003;  ;xx                  ;Decimal        }
                           { 50004;  ;xx2                 ;Decimal        }
                           { 50300;  ;Grade               ;Option        ;OnValidate=BEGIN
                                                                                       //Univision Start 24/10/01 Yusuf
                                                                                         Validate(Quantity,0);
                                                                                         TTSkill:=0;
                                                                                         TTPerformance:= 0;
                                                                                       case Type of
                                                                                           Type::Skill:
                                                                                              case Grade of
                                                                                                Grade::" " :
                                                                                                 Validate(Quantity,0);
                                                                                                Grade::Excellent : begin
                                                                                                 Validate(Quantity,4);
                                                                                                 TTSkill:= 4;
                                                                                                 end;
                                                                                                Grade::Good : begin
                                                                                                 Validate(Quantity,3);
                                                                                                 TTSkill:= 4;
                                                                                                 end;
                                                                                                Grade::Average : begin
                                                                                                 Validate(Quantity,2);
                                                                                                 TTSkill:= 4;
                                                                                                 end;
                                                                                                Grade::Poor: begin
                                                                                                 Validate(Quantity,1);
                                                                                                 TTSkill:= 4;
                                                                                                 end;
                                                                                             end;
                                                                                           Type::Performance:
                                                                                              case Grade of
                                                                                                Grade::" " :
                                                                                                 Validate(Quantity,0);
                                                                                                Grade::Excellent : begin
                                                                                                 Validate(Quantity,4);
                                                                                                 TTPerformance:= 4;
                                                                                                 end;
                                                                                                Grade::Good : begin
                                                                                                 Validate(Quantity,3);
                                                                                                 TTPerformance:= 4;
                                                                                                 end;
                                                                                                Grade::Average : begin
                                                                                                 Validate(Quantity,2);
                                                                                                 TTPerformance:= 4;
                                                                                                 end;
                                                                                                Grade::Poor : begin
                                                                                                 Validate(Quantity,1);
                                                                                                 TTPerformance:= 4;
                                                                                                 end;
                                                                                             end;

                                                                                       end;
                                                                                       //Univision Finish 24/10/01
                                                                                     END;

                                                                          OptionString=" ",Excellent,Good,Average,Poor;
                                                                          Description=,Excellent,Good,Average,Poor }
                           { 50301;  ;Comment             ;Text80         }
                           { 50302;  ;quantity1           ;Decimal       ;Description=Used by Performance score for sum }
                           { 50303;  ;TTSkill             ;Decimal       ;Description=Used by skill score for sums }
                           { 50304;  ;TTPerformance       ;Decimal       ;Description=used by performance total for sum }
                           { 50350;  ;Numbers             ;Decimal       ;OnValidate=BEGIN
                                                                                       if Numbers<>0 then Packing:=Quantity/Numbers else  Packing:=0;
                                                                                     END;

                                                                          DecimalPlaces=0:0;
                                                                          Description=factor of Quantity }
                           { 50351;  ;Packing             ;Decimal       ;OnValidate=BEGIN
                                                                                       if Packing<>0 then Numbers:=Quantity/Packing else  Numbers:=0;
                                                                                     END;

                                                                          DecimalPlaces=0:0;
                                                                          Description=factor of Quantity }
                           { 50352;  ;Pack Size           ;Code10        ;OnValidate=BEGIN
                                                                                       if UnitOfMeasure.Get("Pack Size") then "Pack Size Code":=UnitOfMeasure."Catch Code";
                                                                                     END;
                                                                                      }
                           { 50353;  ;Brand               ;Code10        ;TableRelation="Reason Code" WHERE ("In Use"=CONST(true),
                                                                                                             Type=CONST(Brands));
                                                                          OnValidate=BEGIN
                                                                                       "Brand Code":=CopyStr(Brand,1,1);
                                                                                     END;
                                                                                      }
                           { 50354;  ;Pack Size Code      ;Code1         ;TableRelation="Unit of Measure" WHERE ("In Use"=CONST(true),
                                                                                                                 "Catch Code"=FILTER(<>'')) }
                           { 50355;  ;Brand Code          ;Code1         ;TableRelation="Reason Code" WHERE ("In Use"=CONST(true),
                                                                                                             Type=CONST(Brands)) }
                           { 50356;  ;ProdCd              ;Code3         ;TableRelation=Item }
                           { 50357;  ;On Pallet           ;Option        ;OptionString=Yes,No,Part }
                           { 50359;  ;Item Category Code Sort;Code15     ;TableRelation="Item Category";
                                                                          CaptionML=ENU=Item Category Code }
                           { 50360;  ;Explodedline        ;Boolean        }
                         }
                          }
    { Insertion         ;InsertAfter="Document Type","Document No.",Type,"No."(Key);
                         ChangedElements=KeyCollection
                         {
                           {    ;"Document Type",Type,"No.","Variant Code","Drop Shipment","Location Code","Bin Code","Shipment Date";
                                                                          SumIndexFields="Outstanding Qty. (Base)" }
                           {    ;"Document Type",Type,"No.","Variant Code","Drop Shipment","Shipment Date";
                                                                          SumIndexFields=Quantity,quantity1,TTSkill,TTPerformance }
                           {    ;"Document No.",Type                      }
                           {    ;"Document Type","Document No.",Type,"Item Category Code Sort","Pack Size",Brand;
                                                                          SumIndexFields=Quantity,Packing }
                           {    ;"Document Type","Document No.",Explodedline }
                         }
                          }
    { CodeModification  ;OriginalCode=BEGIN
                                        IsHandled := false;
                                        OnBeforeMaxQtyToInvoiceBase(Rec,MaxQtyBase,IsHandled);
                                        if IsHandled then
                                          exit(MaxQtyBase);

                                        if IsCreditDocType then
                                          exit("Return Qty. Received (Base)" + "Return Qty. to Receive (Base)" - "Qty. Invoiced (Base)");

                                        exit("Qty. Shipped (Base)" + "Qty. to Ship (Base)" - "Qty. Invoiced (Base)");
                                      END;

                         ModifiedCode=BEGIN
                                         IsHandled := false;
                                        #2..9
                                      END;

                         Target=MaxQtyToInvoiceBase(PROCEDURE 19) }
    { CodeModification  ;OriginalCode=BEGIN
                                        TempErrorMessage.SetContext(Rec);
                                        if TempErrorMessage.FindRecord(RecordId,0,TempErrorMessage."Message Type"::Warning,MessageText) = 0 then begin
                                          TempErrorMessage.LogMessage(Rec,0,TempErrorMessage."Message Type"::Warning,MessageText);
                                          Message(MessageText);
                                        end;
                                      END;

                         ModifiedCode=BEGIN
                                        {TempErrorMessage.SetContext(Rec);
                                        IF TempErrorMessage.FindRecord(RECORDID,0,TempErrorMessage."Message Type"::Warning,MessageText) = 0 THEN BEGIN
                                          TempErrorMessage.LogMessage(Rec,0,TempErrorMessage."Message Type"::Warning,MessageText);
                                          MESSAGE(MessageText);
                                        END;}
                                      END;

                         Target=ShowMessageOnce(PROCEDURE 229) }
    { PropertyModification;
                         Target=UpdatePrepmtSetupFields(PROCEDURE 102);
                         Property=Attributes;
                         OriginalValue=[[External]]];
                         ModifiedValue= }
    { Insertion         ;Target=CheckItemAvailable(PROCEDURE 4);
                         ChangedElements=VariableCollection
                         {
                           CalledByDateField@10001 : Boolean;
                         }
                          }
    { CodeModification  ;OriginalCode=BEGIN
                                        IsHandled := false;
                                        OnBeforeCheckItemAvailable(Rec,CalledByFieldNo,IsHandled,CurrFieldNo);
                                        if IsHandled then
                                        #4..20
                                           ("Job Contract Entry No." = 0) and
                                           not "Special Order"
                                        then begin
                                          if ItemCheckAvail.SalesLineCheck(Rec) then
                                            ItemCheckAvail.RaiseUpdateInterruptedError;
                                        end;
                                      END;

                         ModifiedCode=BEGIN
                                        #1..23
                                          CalledByDateField :=
                                            CalledByFieldNo in [FieldNo("Shipment Date"),FieldNo("Requested Delivery Date"),FieldNo("Promised Delivery Date"),
                                                                FieldNo("Planned Shipment Date"),FieldNo("Planned Delivery Date")];
                                          if ItemCheckAvail.SalesLineCheck(Rec,CalledByDateField) then
                                            ItemCheckAvail.RaiseUpdateInterruptedError;
                                        end;
                                      END;

                         Target=CheckItemAvailable(PROCEDURE 4) }
    { PropertyModification;
                         Target=CalcPlannedDeliveryDate(PROCEDURE 92);
                         Property=Attributes;
                         OriginalValue=[[External]]];
                         ModifiedValue= }
    { PropertyInsertion ;Target=CalcPlannedDeliveryDate(PROCEDURE 92);
                         Property=Local;
                         ModifiedValue=Yes }
    { PropertyModification;
                         Target=CalcPlannedShptDate(PROCEDURE 93);
                         Property=Attributes;
                         OriginalValue=[[External]]];
                         ModifiedValue= }
    { PropertyInsertion ;Target=CalcPlannedShptDate(PROCEDURE 93);
                         Property=Local;
                         ModifiedValue=Yes }
    { CodeModification  ;OriginalCode=BEGIN
                                        case "Document Type" of
                                          "Document Type"::Quote,
                                          "Document Type"::Order,
                                          "Document Type"::Invoice,
                                          "Document Type"::"Blanket Order":
                                            exit(-Value);
                                          "Document Type"::"Return Order",
                                          "Document Type"::"Credit Memo":
                                            exit(Value);
                                        end;
                                      END;

                         ModifiedCode=BEGIN
                                        #1..6
                                          "Document Type"::Appraisal,
                                        #8..10
                                      END;

                         Target=SignedXX(PROCEDURE 20) }
    { CodeModification  ;OriginalCode=BEGIN
                                        Get("Document Type","Document No.","Line No.");
                                        TestField("No.");
                                        TestField(Quantity);

                                        if Type <> Type::"Charge (Item)" then begin
                                          ErrorMsg := Format(ItemChargeAssignmentErr);
                                          Message(ErrorMsg);
                                        #8..50
                                        ItemChargeAssgnts.Initialize(Rec,ItemChargeAssgntLineAmt);
                                        ItemChargeAssgnts.RunModal;
                                        CalcFields("Qty. to Assign");
                                      END;

                         ModifiedCode=BEGIN
                                        #1..3
                                        if not ItemChargeAssgntSales.ReadPermission then    //added by santus 20-10-05
                                                exit;
                                        #5..53
                                      END;

                         Target=ShowItemChargeAssgnt(PROCEDURE 5801) }
    { CodeModification  ;OriginalCode=BEGIN
                                        if "Document Type" = "Document Type"::"Blanket Order" then
                                          exit;

                                        CalcFields("Qty. Assigned","Qty. to Assign");
                                        if Abs("Quantity Invoiced") > Abs(("Qty. Assigned" + "Qty. to Assign")) then
                                          Error(Text055,FieldCaption("Quantity Invoiced"),FieldCaption("Qty. Assigned"),FieldCaption("Qty. to Assign"));

                                        #8..44
                                          until ItemChargeAssgntSales.Next = 0;
                                          CalcFields("Qty. to Assign");
                                        end;
                                      END;

                         ModifiedCode=BEGIN

                                        if not ItemChargeAssgntSales.ReadPermission then    //added by santus 20-10-05
                                                exit;
                                        if "Document Type" = "Document Type"::"Blanket Order" then
                                          exit;
                                          CalcFields("Qty. Assigned","Qty. to Assign");
                                        #5..47
                                      END;

                         Target=UpdateItemChargeAssgnt(PROCEDURE 5807) }
    { CodeModification  ;OriginalCode=BEGIN
                                        ItemChargeAssgntSales.SetRange("Applies-to Doc. Type",DocType);
                                        ItemChargeAssgntSales.SetRange("Applies-to Doc. No.",DocNo);
                                        ItemChargeAssgntSales.SetRange("Applies-to Doc. Line No.",DocLineNo);
                                        if not ItemChargeAssgntSales.IsEmpty then
                                          ItemChargeAssgntSales.DeleteAll(true);
                                      END;

                         ModifiedCode=BEGIN
                                        if not ItemChargeAssgntSales.ReadPermission then    //added by santus 20-10-0
                                          exit;
                                        #1..5
                                      END;

                         Target=DeleteItemChargeAssgnt(PROCEDURE 5802) }
    { CodeModification  ;OriginalCode=BEGIN
                                        if DocType <> "Document Type"::"Blanket Order" then
                                          if "Quantity Invoiced" <> 0 then begin
                                            CalcFields("Qty. Assigned");
                                            TestField("Qty. Assigned","Quantity Invoiced");
                                        #5..11
                                          ItemChargeAssgntSales.DeleteAll;

                                        OnAfterDeleteChargeChargeAssgnt(Rec,xRec,CurrFieldNo);
                                      END;

                         ModifiedCode=BEGIN
                                        if DocType <> "Document Type"::"Blanket Order" then
                                          if not ItemChargeAssgntSales.ReadPermission then    //added by santus 20-10-05
                                                exit;
                                        #2..14
                                      END;

                         Target=DeleteChargeChargeAssgnt(PROCEDURE 5804) }
    { CodeModification  ;OriginalCode=BEGIN
                                        if IsCalcVATAmountLinesHandled(SalesHeader,SalesLine,VATAmountLine) then
                                          exit;

                                        #4..41
                                                          end else begin
                                                            QtyToHandle := "Qty. to Invoice";
                                                            VATAmountLine.Quantity += "Qty. to Invoice (Base)";
                                                          end;
                                                        IsCreditDocType and (not SalesHeader.Receive) and SalesHeader.Invoice:
                                                          if "Return Receipt No." = '' then begin
                                                            QtyToHandle := GetAbsMin("Qty. to Invoice","Return Qty. Rcd. Not Invd.");
                                                            VATAmountLine.Quantity += GetAbsMin("Qty. to Invoice (Base)","Ret. Qty. Rcd. Not Invd.(Base)");
                                                          end else begin
                                                            QtyToHandle := "Qty. to Invoice";
                                                            VATAmountLine.Quantity += "Qty. to Invoice (Base)";
                                                          end;
                                                        else
                                                          begin
                                                          QtyToHandle := "Qty. to Invoice";
                                        #57..68
                                                  QtyType::Shipping:
                                                    begin
                                                      if "Document Type" in
                                                         ["Document Type"::"Return Order","Document Type"::"Credit Memo"]
                                                      then begin
                                                        QtyToHandle := "Return Qty. to Receive";
                                                        VATAmountLine.Quantity += "Return Qty. to Receive (Base)";
                                        #76..101
                                          end;

                                        OnAfterCalcVATAmountLines(SalesHeader,SalesLine,VATAmountLine,QtyType);
                                      END;

                         ModifiedCode=BEGIN
                                        #1..44
                                                          end;                      IsCreditDocType and (not SalesHeader.Receive) and SalesHeader.Invoice:
                                        #47..51
                                                            VATAmountLine.Quantity += "Qty. to Invoice (Base)";                        end;
                                        #54..71
                                                         ["Document Type"::Appraisal,"Document Type"::"Credit Memo"]
                                        #73..104
                                      END;

                         Target=CalcVATAmountLines(PROCEDURE 35) }
    { CodeModification  ;OriginalCode=BEGIN
                                        if Type = Type::Item then
                                          case true of
                                            ("Document Type" in ["Document Type"::Quote,"Document Type"::Order]) and (Quantity >= 0):
                                        #4..9
                                                Validate("Qty. to Ship",0)
                                              else
                                                Validate("Qty. to Ship","Outstanding Quantity");
                                            ("Document Type" = "Document Type"::"Return Order") and (Quantity >= 0):
                                              if Location.RequireReceive("Location Code") then
                                                Validate("Return Qty. to Receive",0)
                                              else
                                                Validate("Return Qty. to Receive","Outstanding Quantity");
                                            ("Document Type" = "Document Type"::"Return Order") and (Quantity < 0):
                                              if Location.RequireShipment("Location Code") then
                                                Validate("Return Qty. to Receive",0)
                                              else
                                        #22..24
                                        SetDefaultQuantity;

                                        OnAfterUpdateWithWarehouseShip(SalesHeader,Rec);
                                      END;

                         ModifiedCode=BEGIN
                                        #1..12
                                            ("Document Type" = "Document Type"::Appraisal) and (Quantity >= 0):
                                        #14..17
                                            ("Document Type" = "Document Type"::Appraisal) and (Quantity < 0):
                                        #19..27
                                      END;

                         Target=UpdateWithWarehouseShip(PROCEDURE 41) }
    { CodeModification  ;OriginalCode=BEGIN
                                        GetLocation("Location Code");
                                        if "Location Code" = '' then begin
                                          WhseSetup.Get;
                                        #4..8
                                          Location2 := Location;

                                        DialogText := Text035;
                                        if ("Document Type" in ["Document Type"::Order,"Document Type"::"Return Order"]) and
                                           Location2."Directed Put-away and Pick"
                                        then begin
                                          ShowDialog := ShowDialog::Error;
                                          if (("Document Type" = "Document Type"::Order) and (Quantity >= 0)) or
                                             (("Document Type" = "Document Type"::"Return Order") and (Quantity < 0))
                                          then
                                            DialogText :=
                                              DialogText + Location2.GetRequirementText(Location2.FieldNo("Require Shipment"))
                                        #21..23
                                        end else begin
                                          if (("Document Type" = "Document Type"::Order) and (Quantity >= 0) and
                                              (Location2."Require Shipment" or Location2."Require Pick")) or
                                             (("Document Type" = "Document Type"::"Return Order") and (Quantity < 0) and
                                              (Location2."Require Shipment" or Location2."Require Pick"))
                                          then begin
                                            if WhseValidateSourceLine.WhseLinesExist(
                                        #31..50

                                          if (("Document Type" = "Document Type"::Order) and (Quantity < 0) and
                                              (Location2."Require Receive" or Location2."Require Put-away")) or
                                             (("Document Type" = "Document Type"::"Return Order") and (Quantity >= 0) and
                                              (Location2."Require Receive" or Location2."Require Put-away"))
                                          then begin
                                            if WhseValidateSourceLine.WhseLinesExist(
                                        #58..86
                                        end;

                                        HandleDedicatedBin(true);
                                      END;

                         ModifiedCode=BEGIN
                                        #1..11
                                        if ("Document Type" in ["Document Type"::Order,"Document Type"::Appraisal]) and
                                        #13..16
                                             (("Document Type" = "Document Type"::Appraisal) and (Quantity < 0))
                                        #18..26
                                             (("Document Type" = "Document Type"::Appraisal) and (Quantity < 0) and
                                        #28..53
                                             (("Document Type" = "Document Type"::Appraisal) and (Quantity >= 0) and
                                        #55..89
                                      END;

                         Target=CheckWarehouse(PROCEDURE 46) }
    { CodeModification  ;OriginalCode=BEGIN
                                        case "Document Type" of
                                          "Document Type"::Order,"Document Type"::Invoice,"Document Type"::Quote,"Document Type"::"Blanket Order":
                                            exit("Quantity (Base)" < 0);
                                          "Document Type"::"Return Order","Document Type"::"Credit Memo":
                                            exit("Quantity (Base)" > 0);
                                        end;

                                        exit(false);
                                      END;

                         ModifiedCode=BEGIN
                                        #1..3
                                          "Document Type"::Appraisal,"Document Type"::"Credit Memo":
                                        #5..8
                                      END;

                         Target=IsInbound(PROCEDURE 97) }
    { CodeModification  ;OriginalCode=BEGIN
                                        IsHandled := false;
                                        OnBeforeCheckAssocPurchOrder(Rec,TheFieldCaption,IsHandled,xRec);
                                        if IsHandled then
                                          exit;

                                        if TheFieldCaption = '' then begin // If sales line is being deleted
                                          if "Purch. Order Line No." <> 0 then
                                            Error(Text000,"Purchase Order No.","Purch. Order Line No.");
                                          if "Special Order Purch. Line No." <> 0 then
                                        #10..14
                                          if "Special Order Purch. Line No." <> 0 then
                                            Error(Text002,TheFieldCaption,"Special Order Purchase No.","Special Order Purch. Line No.");
                                        end;
                                      END;

                         ModifiedCode=BEGIN
                                        #1..5
                                        if TheFieldCaption = '' then begin  //If sales line is being deleted
                                        #7..17
                                      END;

                         Target=CheckAssocPurchOrder(PROCEDURE 51) }
    { CodeModification  ;OriginalCode=BEGIN
                                        GetSalesSetup;
                                        if SalesSetup."Default Quantity to Ship" = SalesSetup."Default Quantity to Ship"::Blank then begin
                                          if ("Document Type" = "Document Type"::Order) or ("Document Type" = "Document Type"::Quote) then begin
                                            "Qty. to Ship" := 0;
                                            "Qty. to Ship (Base)" := 0;
                                            "Qty. to Invoice" := 0;
                                            "Qty. to Invoice (Base)" := 0;
                                          end;
                                          if "Document Type" = "Document Type"::"Return Order" then begin
                                            "Return Qty. to Receive" := 0;
                                            "Return Qty. to Receive (Base)" := 0;
                                            "Qty. to Invoice" := 0;
                                            "Qty. to Invoice (Base)" := 0;
                                          end;
                                        end;

                                        OnAfterSetDefaultQuantity(Rec,xRec);
                                      END;

                         ModifiedCode=BEGIN
                                        #1..8
                                          if "Document Type" = "Document Type"::Appraisal then begin
                                        #10..17
                                      END;

                         Target=SetDefaultQuantity(PROCEDURE 62) }
    { CodeModification  ;OriginalCode=BEGIN
                                        IsHandled := false;
                                        OnBeforeValidateReturnReasonCode(Rec,CallingFieldNo,IsHandled);
                                        if IsHandled then
                                        #4..13
                                        if ReturnReason.Get("Return Reason Code") then begin
                                          if (CallingFieldNo <> FieldNo("Location Code")) and (ReturnReason."Default Location Code" <> '') then
                                            Validate("Location Code",ReturnReason."Default Location Code");
                                          if ReturnReason."Inventory Value Zero" then
                                            Validate("Unit Cost (LCY)",0)
                                          else
                                            if "Unit Price" = 0 then
                                              UpdateUnitPrice(CallingFieldNo);
                                        end;

                                        OnAfterValidateReturnReasonCode(Rec,CallingFieldNo);
                                      END;

                         ModifiedCode=BEGIN
                                        #1..16
                                          if ReturnReason."Inventory Value Zero" then begin
                                            Validate("Unit Cost (LCY)",0);
                                            Validate("Unit Price",0);
                                          end else
                                        #20..24
                                      END;

                         Target=ValidateReturnReasonCode(PROCEDURE 99) }
    { CodeModification  ;OriginalCode=BEGIN
                                        GetSalesHeader;
                                        OnGetDeferralPostDate(SalesHeader,DeferralPostDate,Rec);
                                        if DeferralPostDate = 0D then
                                          DeferralPostDate := SalesHeader."Posting Date";
                                        AdjustStartDate := true;
                                        if "Document Type" = "Document Type"::"Return Order" then begin
                                          if "Returns Deferral Start Date" = 0D then
                                            "Returns Deferral Start Date" := SalesHeader."Posting Date";
                                          DeferralPostDate := "Returns Deferral Start Date";
                                        #10..13
                                          "Deferral Code",DeferralUtilities.GetSalesDeferralDocType,'','',
                                          "Document Type","Document No.","Line No.",
                                          GetDeferralAmount,DeferralPostDate,Description,SalesHeader."Currency Code",AdjustStartDate);
                                      END;

                         ModifiedCode=BEGIN
                                        #1..5
                                        if "Document Type" = "Document Type"::Appraisal then begin
                                        #7..16
                                      END;

                         Target=UpdateDeferralAmounts(PROCEDURE 105) }
    { CodeModification  ;OriginalCode=BEGIN
                                        if "Document Type" in
                                           ["Document Type"::Order,"Document Type"::Invoice,"Document Type"::"Credit Memo","Document Type"::"Return Order"]
                                        then
                                          case Type of
                                            Type::"G/L Account":
                                        #6..11
                                            Type::Resource:
                                              Validate("Deferral Code",Res."Default Deferral Template Code");
                                          end;
                                      END;

                         ModifiedCode=BEGIN
                                        if "Document Type" in
                                           ["Document Type"::Order,"Document Type"::Invoice,"Document Type"::"Credit Memo","Document Type"::Appraisal]
                                        #3..14
                                      END;

                         Target=InitDeferralCode(PROCEDURE 108) }
    { CodeModification  ;OriginalCode=BEGIN
                                        exit("Document Type" in ["Document Type"::"Return Order","Document Type"::"Credit Memo"]);
                                      END;

                         ModifiedCode=BEGIN
                                        exit("Document Type" in ["Document Type"::Appraisal,"Document Type"::"Credit Memo"]);
                                      END;

                         Target=IsCreditDocType(PROCEDURE 110) }
    { Deletion          ;Target=OnCrossReferenceNoLookupOnBeforeValidateUnitPrice(PROCEDURE 228).SalesLine(Parameter 1001);
                         ChangedElements=ParameterCollection
                         {
                           { 1001;SalesLine                ;Record       ;AsVar=Yes;
                                                                          Subtype="Sales Line" }
                         }
                          }
    { Insertion         ;Target=OnCrossReferenceNoLookupOnBeforeValidateUnitPrice(PROCEDURE 228);
                         InsertAfter=SalesHeader(Parameter 1000);
                         ChangedElements=ParameterCollection
                         {
                           { 10001;SalesLine               ;Record       ;AsVar=Yes;
                                                                          Subtype="Sales Line" }
                         }
                          }
    { Insertion         ;InsertAfter=IsCreditDocType(PROCEDURE 110);
                         ChangedElements=PROCEDURECollection
                         {
                           [LineStart(9723)]
                           PROCEDURE "----"@1000000000();
                           BEGIN
                           END;

                           [LineStart(9726)]
                           PROCEDURE Addon@1000000001();
                           BEGIN
                             "Pack Size":=TempSalesLine."Pack Size";
                             Brand:=TempSalesLine.Brand;
                             "Pack Size Code":=TempSalesLine."Pack Size Code";
                             "Brand Code":=TempSalesLine."Brand Code";
                             ProdCd:=TempSalesLine.ProdCd;
                           END;

                           [LineStart(9733)]
                           PROCEDURE CatSort@1000000002();
                           BEGIN
                                    if "Postg Gropu".Get("Posting Group") then "Item Category Code Sort":="Postg Gropu".Category;
                           END;

                         }
                          }
    { Move              ;Target=SignedXX(PROCEDURE 20);
                         InsertAfter=CalcPlannedShptDate(PROCEDURE 93);
                         IncludeSiblings=BlanketOrderLookup(PROCEDURE 23),ShowDimensions(PROCEDURE 25),OpenItemTrackingLines(PROCEDURE 6500),CreateDim(PROCEDURE 26),ValidateShortcutDimCode(PROCEDURE 29),LookupShortcutDimCode(PROCEDURE 28),ShowShortcutDimCode(PROCEDURE 27) }
    { Move              ;Target=ShowItemSub(PROCEDURE 30);
                         InsertAfter=ShowShortcutDimCode(PROCEDURE 27);
                         IncludeSiblings=ShowNonstock(PROCEDURE 32),GetSalesSetup(PROCEDURE 100),GetFAPostingGroup(PROCEDURE 6) }
    { Move              ;Target=OnValidateNoOnBeforeInitRec(PROCEDURE 31);
                         InsertAfter=GetFAPostingGroup(PROCEDURE 6) }
    { Move              ;Target=GetCaptionClass(PROCEDURE 34);
                         InsertAfter=OnValidateNoOnBeforeInitRec(PROCEDURE 31);
                         IncludeSiblings=GetSKU(PROCEDURE 5806),GetUnitCost(PROCEDURE 5808),CalcUnitCost(PROCEDURE 5809),ShowItemChargeAssgnt(PROCEDURE 5801),UpdateItemChargeAssgnt(PROCEDURE 5807),DeleteItemChargeAssgnt(PROCEDURE 5802),DeleteChargeChargeAssgnt(PROCEDURE 5804),CheckItemChargeAssgnt(PROCEDURE 5800),TestStatusOpen(PROCEDURE 33),SuspendStatusCheck(PROCEDURE 39),UpdateVATOnLines(PROCEDURE 36),CalcVATAmountLines(PROCEDURE 35),GetCPGInvRoundAcc(PROCEDURE 71) }
    { Move              ;Target=CalcInvDiscToInvoice(PROCEDURE 37);
                         InsertAfter=GetCPGInvRoundAcc(PROCEDURE 71);
                         IncludeSiblings=UpdateWithWarehouseShip(PROCEDURE 41),CheckWarehouse(PROCEDURE 46),UpdateDates(PROCEDURE 43),GetItemTranslation(PROCEDURE 42),GetLocation(PROCEDURE 7300),PriceExists(PROCEDURE 44),LineDiscExists(PROCEDURE 45),RowID1(PROCEDURE 47),UpdateItemCrossRef(PROCEDURE 48),GetDefaultBin(PROCEDURE 50),GetATOBin(PROCEDURE 89),IsInbound(PROCEDURE 97),HandleDedicatedBin(PROCEDURE 70),CheckAssocPurchOrder(PROCEDURE 51) }
    { Move              ;Target=CrossReferenceNoLookUp(PROCEDURE 53);
                         InsertAfter=CheckAssocPurchOrder(PROCEDURE 51) }
    { Move              ;Target=CheckServItemCreation(PROCEDURE 52);
                         InsertAfter=CrossReferenceNoLookUp(PROCEDURE 53);
                         IncludeSiblings=ItemExists(PROCEDURE 54) }
    { Move              ;Target=IsShipment(PROCEDURE 55);
                         InsertAfter=ItemExists(PROCEDURE 54);
                         IncludeSiblings=GetAbsMin(PROCEDURE 56),SetHideValidationDialog(PROCEDURE 57) }
    { Move              ;Target=CheckApplFromItemLedgEntry(PROCEDURE 157);
                         InsertAfter=SetHideValidationDialog(PROCEDURE 57);
                         IncludeSiblings=CalcPrepaymentToDeduct(PROCEDURE 63),IsFinalInvoice(PROCEDURE 116),GetLineAmountToHandle(PROCEDURE 117) }
    { Move              ;Target=SetHasBeenShown(PROCEDURE 59);
                         InsertAfter=GetLineAmountToHandle(PROCEDURE 117);
                         IncludeSiblings=TestJobPlanningLine(PROCEDURE 60),BlockDynamicTracking(PROCEDURE 58),InitQtyToShip2(PROCEDURE 7),ShowLineComments(PROCEDURE 61),SetDefaultQuantity(PROCEDURE 62) }
    { Move              ;Target=UpdatePrePaymentAmounts(PROCEDURE 64);
                         InsertAfter=SetDefaultQuantity(PROCEDURE 62);
                         IncludeSiblings=ZeroAmountLine(PROCEDURE 65),FilterLinesWithItemToPlan(PROCEDURE 69),FindLinesWithItemToPlan(PROCEDURE 66),LinesWithItemToPlanExist(PROCEDURE 67),DateFormularZero(PROCEDURE 73),InitQtyToAsm(PROCEDURE 76),AsmToOrderExists(PROCEDURE 72),FullQtyIsForAsmToOrder(PROCEDURE 74),FullReservedQtyIsForAsmToOrder(PROCEDURE 75),QtyBaseOnATO(PROCEDURE 86),QtyAsmRemainingBaseOnATO(PROCEDURE 90),QtyToAsmBaseOnATO(PROCEDURE 88),IsAsmToOrderAllowed(PROCEDURE 77),IsAsmToOrderRequired(PROCEDURE 81),CheckAsmToOrder(PROCEDURE 85) }
    { Move              ;Target=ValidateTaxGroupCode(PROCEDURE 79);
                         InsertAfter=CheckAsmToOrder(PROCEDURE 85) }
    { Move              ;Target=ShowAsmToOrderLines(PROCEDURE 80);
                         InsertAfter=ValidateTaxGroupCode(PROCEDURE 79);
                         IncludeSiblings=FindOpenATOEntry(PROCEDURE 96),RollUpAsmCost(PROCEDURE 83),RollupAsmPrice(PROCEDURE 84),UpdateICPartner(PROCEDURE 78),OutstandingInvoiceAmountFromShipment(PROCEDURE 12),CheckShipmentRelation(PROCEDURE 94),CheckRetRcptRelation(PROCEDURE 95),VerifyItemLineDim(PROCEDURE 87) }
    { Move              ;Target=InitType(PROCEDURE 91);
                         InsertAfter=VerifyItemLineDim(PROCEDURE 87);
                         IncludeSiblings=CheckWMS(PROCEDURE 98),CheckLocationOnWMS(PROCEDURE 101) }
    { Move              ;Target=OnAfterUpdateTotalAmounts(PROCEDURE 68);
                         InsertAfter=CheckLocationOnWMS(PROCEDURE 101) }
    { Move              ;Target=ValidateReturnReasonCode(PROCEDURE 99);
                         InsertAfter=OnAfterUpdateTotalAmounts(PROCEDURE 68) }
    { Move              ;Target=HasTypeToFillMandatoryFields(PROCEDURE 103);
                         InsertAfter=ValidateReturnReasonCode(PROCEDURE 99);
                         IncludeSiblings=GetDeferralAmount(PROCEDURE 104),UpdateDeferralAmounts(PROCEDURE 105) }
    { Move              ;Target=ShowDeferrals(PROCEDURE 106);
                         InsertAfter=UpdateDeferralAmounts(PROCEDURE 105);
                         IncludeSiblings=InitHeaderDefaults(PROCEDURE 107),InitDeferralCode(PROCEDURE 108),DefaultDeferralCode(PROCEDURE 109),IsCreditDocType(PROCEDURE 110) }
    { PropertyModification;
                         Target=GLAcc(Variable 1035);
                         Property=Id;
                         OriginalValue=1035;
                         ModifiedValue=1099 }
    { Insertion         ;InsertAfter=SalesLine2(Variable 1032);
                         ChangedElements=VariableCollection
                         {
                           TempSalesLine@1035 : Record "Sales Line";
                         }
                          }
    { Insertion         ;InsertAfter=CannotChangePrepmtAmtDiffVAtPctErr(Variable 1095);
                         ChangedElements=VariableCollection
                         {
                           "-----"@10096 : Text[30];
                           TTSkill@10095 : Decimal;
                           TTPerformance@10091 : Decimal;
                           AppraiseRec@10072 : Record "Payroll-Lookup Lines.";
                           "Postg Gropu"@10068 : Record "Inventory Posting Group";
                           "..................."@1110 : Integer;
                           ItemAvailByDate@1113 : Page "Item Availability by Periods";
                           ItemAvailByVar@1112 : Page "Item Availability by Variant";
                           ItemAvailByLoc@1111 : Page "Item Availability by Location";
                           "............"@1114 : TextConst;
                           Text012@1115 : TextConst 'ENU=Change %1 from %2 to %3?';
                           userrec@1116 : Record "User Setup";
                         }
                          }
  }
  CODE
  {

    BEGIN
    END.
  }
}

